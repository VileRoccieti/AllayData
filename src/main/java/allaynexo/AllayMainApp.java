/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package allaynexo;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTabbedPane;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicTabbedPaneUI;

/**
 *
 * @author plobb
 */
public class AllayMainApp extends javax.swing.JFrame {

    /**
     * Creates new form AllayUserManager
     */
    public AllayMainApp() {
        initComponents();
        actualizarTablaUsuarios();
        actualizarTablaPagos();
        cargarOrdenesATabla();
        actualizarTablaProductos();
        initializeApp();
        cargarNotificacionesATabla();
        cargarTotalesAdministrador();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainTabs = new javax.swing.JTabbedPane();
        OverviewTab = new javax.swing.JPanel();
        TotalUsersOverviewPanel = new allaynexo.PanelRound();
        TotalUsersOverviewPanel3 = new allaynexo.PanelRound();
        TotalUsuariosOverviewIcon = new javax.swing.JLabel();
        TotalUsuariosOverview = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        TotalUsersOverviewPanel1 = new allaynexo.PanelRound();
        TotalUsersOverviewPanel5 = new allaynexo.PanelRound();
        TotalProductosOverviewIcon = new javax.swing.JLabel();
        TotalProductosOverview = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        TotalUsersOverviewPanel2 = new allaynexo.PanelRound();
        JPanel = new allaynexo.PanelRound();
        TotalPedidosOverviewIcon = new javax.swing.JLabel();
        TotalPedidosOverview = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        panelRound2 = new allaynexo.PanelRound();
        TotalUsersOverviewPanel9 = new allaynexo.PanelRound();
        TotalSancionesOverviewIcon = new javax.swing.JLabel();
        TotalSancionesOverview = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        UserManagerTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        InputContrase√±a = new javax.swing.JTextField();
        InputNombre = new javax.swing.JTextField();
        InputApellido = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        InputBalance = new javax.swing.JTextField();
        InputCedula = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        InputEdad = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        InputTelefono = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        InputEstado = new javax.swing.JComboBox<>();
        InputNivel = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        InputEmail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        UsersTable = new javax.swing.JTable();
        BActualizar = new javax.swing.JButton();
        BEliminar = new javax.swing.JButton();
        BBuscar = new javax.swing.JButton();
        InputID = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        BGuardar = new javax.swing.JButton();
        BActualizarUsuario = new javax.swing.JButton();
        BLimpiarDatos = new javax.swing.JButton();
        OrdersManagerTab = new javax.swing.JPanel();
        InputDestino = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        InputOrigen = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        InputEnvio = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        InputCliente = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        InputTelefonoCliente = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        InputEmailCliente = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        InputPesoPaqueteOrder = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        InputEntregaOrder = new javax.swing.JComboBox<>();
        jLabel32 = new javax.swing.JLabel();
        InputFechaCreacion = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        InputCodigoTracking = new javax.swing.JTextField();
        InputFechaEstimada = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        InputEstadoOrder = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        OrdersTable = new javax.swing.JTable();
        BActualizarOrders = new javax.swing.JButton();
        BEliminarOrders = new javax.swing.JButton();
        BBuscarOrders = new javax.swing.JButton();
        InputOrderID = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        BLimpiarDatosOrders = new javax.swing.JButton();
        BActualizarOrder = new javax.swing.JButton();
        BGuardarOrders = new javax.swing.JButton();
        PaymentsManagerTab = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        InputCodigoPago = new javax.swing.JTextField();
        InputIDOrdenPago = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        InputIDClientePago = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        InputFechaPago = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        InputMontoPago = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        InputConceptoPago = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        InputEntidadEmisoraPago = new javax.swing.JComboBox<>();
        jLabel44 = new javax.swing.JLabel();
        InputPlataformaPago = new javax.swing.JComboBox<>();
        InputMetodoPago = new javax.swing.JComboBox<>();
        jLabel45 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        PaymentsTable = new javax.swing.JTable();
        BEliminarPayments = new javax.swing.JButton();
        BActualizarPayments = new javax.swing.JButton();
        BBuscarPayments = new javax.swing.JButton();
        InputPaymentID = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        BLimpiarDatosPayments = new javax.swing.JButton();
        BActualizarPayment = new javax.swing.JButton();
        BGuardarPayments = new javax.swing.JButton();
        jLabel46 = new javax.swing.JLabel();
        InputEstadoPago = new javax.swing.JComboBox<>();
        ProductsManagerTab = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        InputTipoProducto = new javax.swing.JTextField();
        InputEmpresaProducto = new javax.swing.JTextField();
        InputCreacionProducto = new javax.swing.JTextField();
        InputCostoProducto = new javax.swing.JTextField();
        InputNombreProducto = new javax.swing.JTextField();
        InputIDProducto = new javax.swing.JTextField();
        InputProveedorProducto = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        InputPesoProducto = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        InputStockProducto = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        InputDimensionesProducto = new javax.swing.JComboBox<>();
        jLabel58 = new javax.swing.JLabel();
        InputEstadoProducto = new javax.swing.JComboBox<>();
        jLabel59 = new javax.swing.JLabel();
        InputTipoPesoProducto = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        ProductsTable = new javax.swing.JTable();
        InputProductoID = new javax.swing.JTextField();
        BBuscarProducto = new javax.swing.JButton();
        BEliminarProducto = new javax.swing.JButton();
        BActualizarProductos = new javax.swing.JButton();
        jLabel60 = new javax.swing.JLabel();
        BLimpiarDatosProductos = new javax.swing.JButton();
        BActualizarProducto = new javax.swing.JButton();
        BGuardarProducto = new javax.swing.JButton();
        NotificationsTab = new javax.swing.JPanel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        InputIDUsuario = new javax.swing.JTextField();
        InputIDNotificacion = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        InputMensajeNotificacion = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        InputEstadoNotificacion = new javax.swing.JComboBox<>();
        InputPrioridadNotificacion = new javax.swing.JComboBox<>();
        jLabel69 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        InputAsuntoNotificacion = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        InputHoraEnvioNotificacion = new javax.swing.JTextField();
        InputFechaNotificacion = new javax.swing.JTextField();
        jLabel73 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        NotificationsTable = new javax.swing.JTable();
        BBuscarNotificacion = new javax.swing.JButton();
        BEliminarNotificacion = new javax.swing.JButton();
        BActualizarNotificaciones = new javax.swing.JButton();
        InputIDNotificacionPrioridad = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        BLimpiarDatosNotificaciones = new javax.swing.JButton();
        BSobreescribirNotificacion = new javax.swing.JButton();
        BGuardarNotificacion = new javax.swing.JButton();
        MainAppSelector = new allaynexo.PanelRound();
        AllayNexoIcon = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        OverviewMainPanel = new allaynexo.PanelRound();
        OverviewIcon = new javax.swing.JLabel();
        BOverivewMain = new javax.swing.JButton();
        UsersManagerMainPanel = new allaynexo.PanelRound();
        UsersManagerIcon = new javax.swing.JLabel();
        BUsersManagerMain = new javax.swing.JButton();
        OrdersManagerMainPanel = new allaynexo.PanelRound();
        OrdersManagerIcon = new javax.swing.JLabel();
        BOrdersManagerMain = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        ProductManagerMainPanel = new allaynexo.PanelRound();
        ProductManagerIcon = new javax.swing.JLabel();
        BProductManagerMain = new javax.swing.JButton();
        PaymentsManagerMainPanel = new allaynexo.PanelRound();
        PaymentsManagersIcon = new javax.swing.JLabel();
        BPaymentsManagerMain = new javax.swing.JButton();
        BMainExportarDatos = new javax.swing.JButton();
        BMainImportarDatos = new javax.swing.JButton();
        jLabel61 = new javax.swing.JLabel();
        BCerrarSesion = new javax.swing.JButton();
        PaymentsManagerMainPanel1 = new allaynexo.PanelRound();
        NotificationsIcon = new javax.swing.JLabel();
        BNotificationsManagerMain = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainTabs.setBackground(new java.awt.Color(35, 35, 35));

        TotalUsersOverviewPanel.setBackground(new java.awt.Color(80, 81, 249));
        TotalUsersOverviewPanel.setRoundBottomLeft(15);
        TotalUsersOverviewPanel.setRoundBottomRight(15);
        TotalUsersOverviewPanel.setRoundTopLeft(15);
        TotalUsersOverviewPanel.setRoundTopRight(15);

        TotalUsersOverviewPanel3.setBackground(new java.awt.Color(120, 111, 249));
        TotalUsersOverviewPanel3.setRoundBottomLeft(15);
        TotalUsersOverviewPanel3.setRoundBottomRight(15);
        TotalUsersOverviewPanel3.setRoundTopLeft(15);
        TotalUsersOverviewPanel3.setRoundTopRight(15);

        javax.swing.GroupLayout TotalUsersOverviewPanel3Layout = new javax.swing.GroupLayout(TotalUsersOverviewPanel3);
        TotalUsersOverviewPanel3.setLayout(TotalUsersOverviewPanel3Layout);
        TotalUsersOverviewPanel3Layout.setHorizontalGroup(
            TotalUsersOverviewPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalUsersOverviewPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TotalUsuariosOverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TotalUsersOverviewPanel3Layout.setVerticalGroup(
            TotalUsersOverviewPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalUsersOverviewPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TotalUsuariosOverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TotalUsuariosOverview.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        TotalUsuariosOverview.setForeground(new java.awt.Color(255, 255, 255));
        TotalUsuariosOverview.setText("00,000");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Total de Usuarios");

        javax.swing.GroupLayout TotalUsersOverviewPanelLayout = new javax.swing.GroupLayout(TotalUsersOverviewPanel);
        TotalUsersOverviewPanel.setLayout(TotalUsersOverviewPanelLayout);
        TotalUsersOverviewPanelLayout.setHorizontalGroup(
            TotalUsersOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TotalUsersOverviewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TotalUsersOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(TotalUsersOverviewPanelLayout.createSequentialGroup()
                        .addComponent(TotalUsuariosOverview, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                        .addGap(42, 42, 42)))
                .addGap(295, 295, 295)
                .addComponent(TotalUsersOverviewPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        TotalUsersOverviewPanelLayout.setVerticalGroup(
            TotalUsersOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalUsersOverviewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TotalUsersOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TotalUsersOverviewPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TotalUsuariosOverview, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addContainerGap())
        );

        TotalUsersOverviewPanel1.setBackground(new java.awt.Color(247, 176, 0));
        TotalUsersOverviewPanel1.setRoundBottomLeft(15);
        TotalUsersOverviewPanel1.setRoundBottomRight(15);
        TotalUsersOverviewPanel1.setRoundTopLeft(15);
        TotalUsersOverviewPanel1.setRoundTopRight(15);

        TotalUsersOverviewPanel5.setBackground(new java.awt.Color(227, 156, 0));
        TotalUsersOverviewPanel5.setRoundBottomLeft(15);
        TotalUsersOverviewPanel5.setRoundBottomRight(15);
        TotalUsersOverviewPanel5.setRoundTopLeft(15);
        TotalUsersOverviewPanel5.setRoundTopRight(15);

        TotalProductosOverviewIcon.setToolTipText("");

        javax.swing.GroupLayout TotalUsersOverviewPanel5Layout = new javax.swing.GroupLayout(TotalUsersOverviewPanel5);
        TotalUsersOverviewPanel5.setLayout(TotalUsersOverviewPanel5Layout);
        TotalUsersOverviewPanel5Layout.setHorizontalGroup(
            TotalUsersOverviewPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TotalUsersOverviewPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TotalProductosOverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        TotalUsersOverviewPanel5Layout.setVerticalGroup(
            TotalUsersOverviewPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalUsersOverviewPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TotalProductosOverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TotalProductosOverview.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        TotalProductosOverview.setForeground(new java.awt.Color(255, 255, 255));
        TotalProductosOverview.setText("00,000");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Total de Productos");
        jLabel19.setToolTipText("");

        javax.swing.GroupLayout TotalUsersOverviewPanel1Layout = new javax.swing.GroupLayout(TotalUsersOverviewPanel1);
        TotalUsersOverviewPanel1.setLayout(TotalUsersOverviewPanel1Layout);
        TotalUsersOverviewPanel1Layout.setHorizontalGroup(
            TotalUsersOverviewPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TotalUsersOverviewPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TotalUsersOverviewPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TotalUsersOverviewPanel1Layout.createSequentialGroup()
                        .addComponent(TotalProductosOverview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(TotalUsersOverviewPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                        .addGap(98, 98, 98)))
                .addComponent(TotalUsersOverviewPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        TotalUsersOverviewPanel1Layout.setVerticalGroup(
            TotalUsersOverviewPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalUsersOverviewPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TotalUsersOverviewPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TotalUsersOverviewPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TotalProductosOverview))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel19)
                .addContainerGap())
        );

        TotalUsersOverviewPanel2.setBackground(new java.awt.Color(33, 221, 82));
        TotalUsersOverviewPanel2.setRoundBottomLeft(15);
        TotalUsersOverviewPanel2.setRoundBottomRight(15);
        TotalUsersOverviewPanel2.setRoundTopLeft(15);
        TotalUsersOverviewPanel2.setRoundTopRight(15);

        JPanel.setBackground(new java.awt.Color(73, 231, 102));
        JPanel.setRoundBottomLeft(15);
        JPanel.setRoundBottomRight(15);
        JPanel.setRoundTopLeft(15);
        JPanel.setRoundTopRight(15);

        TotalPedidosOverviewIcon.setToolTipText("");

        javax.swing.GroupLayout JPanelLayout = new javax.swing.GroupLayout(JPanel);
        JPanel.setLayout(JPanelLayout);
        JPanelLayout.setHorizontalGroup(
            JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TotalPedidosOverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        JPanelLayout.setVerticalGroup(
            JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TotalPedidosOverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TotalPedidosOverview.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        TotalPedidosOverview.setForeground(new java.awt.Color(255, 255, 255));
        TotalPedidosOverview.setText("00,000");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Total de Pedidos");

        javax.swing.GroupLayout TotalUsersOverviewPanel2Layout = new javax.swing.GroupLayout(TotalUsersOverviewPanel2);
        TotalUsersOverviewPanel2.setLayout(TotalUsersOverviewPanel2Layout);
        TotalUsersOverviewPanel2Layout.setHorizontalGroup(
            TotalUsersOverviewPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TotalUsersOverviewPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TotalUsersOverviewPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TotalUsersOverviewPanel2Layout.createSequentialGroup()
                        .addComponent(TotalPedidosOverview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(TotalUsersOverviewPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(102, 102, 102)))
                .addComponent(JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        TotalUsersOverviewPanel2Layout.setVerticalGroup(
            TotalUsersOverviewPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalUsersOverviewPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TotalUsersOverviewPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TotalPedidosOverview))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel21)
                .addContainerGap())
        );

        panelRound2.setBackground(new java.awt.Color(255, 51, 51));
        panelRound2.setRoundBottomLeft(15);
        panelRound2.setRoundBottomRight(15);
        panelRound2.setRoundTopLeft(15);
        panelRound2.setRoundTopRight(15);

        TotalUsersOverviewPanel9.setBackground(new java.awt.Color(255, 102, 102));
        TotalUsersOverviewPanel9.setRoundBottomLeft(15);
        TotalUsersOverviewPanel9.setRoundBottomRight(15);
        TotalUsersOverviewPanel9.setRoundTopLeft(15);
        TotalUsersOverviewPanel9.setRoundTopRight(15);

        TotalSancionesOverviewIcon.setToolTipText("");

        javax.swing.GroupLayout TotalUsersOverviewPanel9Layout = new javax.swing.GroupLayout(TotalUsersOverviewPanel9);
        TotalUsersOverviewPanel9.setLayout(TotalUsersOverviewPanel9Layout);
        TotalUsersOverviewPanel9Layout.setHorizontalGroup(
            TotalUsersOverviewPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TotalUsersOverviewPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TotalSancionesOverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        TotalUsersOverviewPanel9Layout.setVerticalGroup(
            TotalUsersOverviewPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalUsersOverviewPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TotalSancionesOverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TotalSancionesOverview.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        TotalSancionesOverview.setForeground(new java.awt.Color(255, 255, 255));
        TotalSancionesOverview.setText("00,000");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Total de Sanciones");

        javax.swing.GroupLayout panelRound2Layout = new javax.swing.GroupLayout(panelRound2);
        panelRound2.setLayout(panelRound2Layout);
        panelRound2Layout.setHorizontalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound2Layout.createSequentialGroup()
                        .addComponent(TotalSancionesOverview, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
                        .addGap(95, 95, 95)
                        .addComponent(TotalUsersOverviewPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(panelRound2Layout.createSequentialGroup()
                        .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(138, 138, 138))))
        );
        panelRound2Layout.setVerticalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TotalSancionesOverview)
                    .addComponent(TotalUsersOverviewPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel23)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout OverviewTabLayout = new javax.swing.GroupLayout(OverviewTab);
        OverviewTab.setLayout(OverviewTabLayout);
        OverviewTabLayout.setHorizontalGroup(
            OverviewTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OverviewTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OverviewTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(TotalUsersOverviewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRound2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TotalUsersOverviewPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TotalUsersOverviewPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        OverviewTabLayout.setVerticalGroup(
            OverviewTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OverviewTabLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(TotalUsersOverviewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelRound2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TotalUsersOverviewPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TotalUsersOverviewPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        MainTabs.addTab("Overview", OverviewTab);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Nombre(s)");
        jLabel1.setToolTipText("");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Contrase√±a");
        jLabel7.setToolTipText("");

        InputContrase√±a.setToolTipText("Introduce el usuario aqui");

        InputNombre.setToolTipText("Introduce el usuario aqui");

        InputApellido.setToolTipText("Introduce el usuario aqui");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Apellido(s)");
        jLabel2.setToolTipText("");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Balance");
        jLabel10.setToolTipText("");

        InputBalance.setToolTipText("Introduce el usuario aqui");
        InputBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputBalanceActionPerformed(evt);
            }
        });

        InputCedula.setToolTipText("Introduce el usuario aqui");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Cedula");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Edad");
        jLabel4.setToolTipText("");

        InputEdad.setToolTipText("Introduce el usuario aqui");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Telefono");
        jLabel5.setToolTipText("");

        InputTelefono.setToolTipText("Introduce el usuario aqui");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Estado");
        jLabel9.setToolTipText("");

        InputEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Habilitado", "Deshabilitado", "Sancionado" }));

        InputNivel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Usuario", "Administrador", "Due√±o" }));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Nivel de Usuario");
        jLabel8.setToolTipText("");

        InputEmail.setToolTipText("Introduce el usuario aqui");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Email");
        jLabel6.setToolTipText("");

        UsersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Cedula", "Edad", "Telefono", "Email", "Contrase√±a", "Nivel", "Estado", "Balance", "ID"
            }
        ));
        UsersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UsersTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(UsersTable);

        BActualizar.setBackground(new java.awt.Color(0, 204, 51));
        BActualizar.setForeground(new java.awt.Color(255, 255, 255));
        BActualizar.setText("Actualizar");
        BActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarActionPerformed(evt);
            }
        });

        BEliminar.setBackground(new java.awt.Color(255, 51, 51));
        BEliminar.setForeground(new java.awt.Color(255, 255, 255));
        BEliminar.setText("Eliminar");
        BEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEliminarActionPerformed(evt);
            }
        });

        BBuscar.setForeground(new java.awt.Color(10, 10, 10));
        BBuscar.setText("Buscar");
        BBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBuscarActionPerformed(evt);
            }
        });

        InputID.setToolTipText("Introduce el usuario aqui");
        InputID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputIDActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("ID");
        jLabel11.setToolTipText("");

        BGuardar.setText("Guardar");
        BGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGuardarActionPerformed(evt);
            }
        });

        BActualizarUsuario.setBackground(new java.awt.Color(0, 153, 255));
        BActualizarUsuario.setForeground(new java.awt.Color(255, 255, 255));
        BActualizarUsuario.setText("Actualizar Usuario");
        BActualizarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarUsuarioActionPerformed(evt);
            }
        });

        BLimpiarDatos.setText("LimpiarDatos");
        BLimpiarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLimpiarDatosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserManagerTabLayout = new javax.swing.GroupLayout(UserManagerTab);
        UserManagerTab.setLayout(UserManagerTabLayout);
        UserManagerTabLayout.setHorizontalGroup(
            UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserManagerTabLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(UserManagerTabLayout.createSequentialGroup()
                        .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(UserManagerTabLayout.createSequentialGroup()
                                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(UserManagerTabLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(308, 308, 308)
                                        .addComponent(jLabel5)
                                        .addGap(87, 87, 87)
                                        .addComponent(jLabel6))
                                    .addGroup(UserManagerTabLayout.createSequentialGroup()
                                        .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(InputNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(InputApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(InputCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(InputEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(UserManagerTabLayout.createSequentialGroup()
                                .addComponent(InputContrase√±a, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(UserManagerTabLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(InputBalance))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InputTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InputEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InputEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, UserManagerTabLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(InputNivel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(UserManagerTabLayout.createSequentialGroup()
                        .addComponent(BActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(InputID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BLimpiarDatos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BActualizarUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BGuardar)))
                .addContainerGap())
        );
        UserManagerTabLayout.setVerticalGroup(
            UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserManagerTabLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputContrase√±a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BActualizar)
                    .addComponent(BEliminar)
                    .addComponent(BBuscar)
                    .addComponent(jLabel11)
                    .addComponent(InputID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BLimpiarDatos)
                    .addComponent(BActualizarUsuario)
                    .addComponent(BGuardar))
                .addContainerGap())
        );

        MainTabs.addTab("User Management", UserManagerTab);

        InputDestino.setToolTipText("Introduce el usuario aqui");

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel24.setText("Destino");
        jLabel24.setToolTipText("");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel25.setText("Origen");
        jLabel25.setToolTipText("");

        InputOrigen.setToolTipText("Introduce el usuario aqui");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel26.setText("Costo Envio");
        jLabel26.setToolTipText("");

        InputEnvio.setToolTipText("Introduce el usuario aqui");

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel27.setText("ID Cliente");
        jLabel27.setToolTipText("");

        InputCliente.setToolTipText("Introduce el usuario aqui");

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel28.setText("Telefono Cliente");
        jLabel28.setToolTipText("");

        InputTelefonoCliente.setToolTipText("Introduce el usuario aqui");

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel29.setText("Email Cliente");
        jLabel29.setToolTipText("");

        InputEmailCliente.setToolTipText("Introduce el usuario aqui");

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel30.setText("Peso del Paquete");
        jLabel30.setToolTipText("");

        InputPesoPaqueteOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ligero", "Medio", "Pesado" }));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel31.setText("Tipo de Entrega");
        jLabel31.setToolTipText("");

        InputEntregaOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Urgente" }));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel32.setText("Fecha Creaci√≥n");
        jLabel32.setToolTipText("");

        InputFechaCreacion.setToolTipText("Introduce el usuario aqui");
        InputFechaCreacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputFechaCreacionActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel33.setText("Codigo Tracking");
        jLabel33.setToolTipText("");

        InputCodigoTracking.setToolTipText("Introduce el usuario aqui");

        InputFechaEstimada.setToolTipText("Introduce el usuario aqui");
        InputFechaEstimada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputFechaEstimadaActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel34.setText("Fecha Estimada");
        jLabel34.setToolTipText("");

        jLabel35.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel35.setText("Estado Paquete");
        jLabel35.setToolTipText("");

        InputEstadoOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "En Espera", "En recolecci√≥n", "En Terminal Origen", "En Ruta", "En Terminal Destino", "En Problema", "En Reparto", "Entregado", "Sancionado" }));

        OrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Destino", "Origen", "Costo Env√≠o", "ID Orden", "ID Cliente", "Tel√©fono Cliente", "Email Cliente", "C√≥digo Tracking", "Fecha Creaci√≥n", "Fecha Estimada", "Estado", "Tipo Entrega", "Peso Paquete"
            }
        ));
        OrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OrdersTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(OrdersTable);

        BActualizarOrders.setBackground(new java.awt.Color(0, 204, 51));
        BActualizarOrders.setForeground(new java.awt.Color(255, 255, 255));
        BActualizarOrders.setText("Actualizar");
        BActualizarOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarOrdersActionPerformed(evt);
            }
        });

        BEliminarOrders.setBackground(new java.awt.Color(255, 51, 51));
        BEliminarOrders.setForeground(new java.awt.Color(255, 255, 255));
        BEliminarOrders.setText("Eliminar");
        BEliminarOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEliminarOrdersActionPerformed(evt);
            }
        });

        BBuscarOrders.setForeground(new java.awt.Color(10, 10, 10));
        BBuscarOrders.setText("Buscar");
        BBuscarOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBuscarOrdersActionPerformed(evt);
            }
        });

        InputOrderID.setToolTipText("Introduce el usuario aqui");
        InputOrderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputOrderIDActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel36.setText("ID");
        jLabel36.setToolTipText("");

        BLimpiarDatosOrders.setText("LimpiarDatos");
        BLimpiarDatosOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLimpiarDatosOrdersActionPerformed(evt);
            }
        });

        BActualizarOrder.setBackground(new java.awt.Color(0, 153, 255));
        BActualizarOrder.setForeground(new java.awt.Color(255, 255, 255));
        BActualizarOrder.setText("Actualizar Pedido");
        BActualizarOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarOrderActionPerformed(evt);
            }
        });

        BGuardarOrders.setText("Guardar");
        BGuardarOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGuardarOrdersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OrdersManagerTabLayout = new javax.swing.GroupLayout(OrdersManagerTab);
        OrdersManagerTab.setLayout(OrdersManagerTabLayout);
        OrdersManagerTabLayout.setHorizontalGroup(
            OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InputDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33)
                            .addComponent(InputCodigoTracking, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25)
                                    .addComponent(InputOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(InputEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel27)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(InputCliente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputFechaCreacion, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel32))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputFechaEstimada, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel34))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                                        .addComponent(jLabel35)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(InputEstadoOrder, 0, 169, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addComponent(jLabel28)
                            .addComponent(InputEntregaOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputTelefonoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InputEmailCliente, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel30))
                                .addGap(0, 26, Short.MAX_VALUE))
                            .addComponent(InputPesoPaqueteOrder, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(BActualizarOrders)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BEliminarOrders)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BBuscarOrders)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel36)
                        .addGap(12, 12, 12)
                        .addComponent(InputOrderID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BLimpiarDatosOrders)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BActualizarOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BGuardarOrders)))
                .addContainerGap())
        );
        OrdersManagerTabLayout.setVerticalGroup(
            OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InputCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputTelefonoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addGap(32, 32, 32))
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputEmailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                            .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel33)
                                .addComponent(jLabel32))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(InputCodigoTracking, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(InputFechaCreacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                            .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel31)
                                .addComponent(jLabel30))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(InputEntregaOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(InputPesoPaqueteOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputFechaEstimada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(OrdersManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputEstadoOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OrdersManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BActualizarOrders)
                    .addComponent(BEliminarOrders)
                    .addComponent(BBuscarOrders)
                    .addComponent(jLabel36)
                    .addComponent(InputOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BLimpiarDatosOrders)
                    .addComponent(BActualizarOrder)
                    .addComponent(BGuardarOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        MainTabs.addTab("Orders Manager", OrdersManagerTab);

        jLabel37.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel37.setText("Codigo Pago");
        jLabel37.setToolTipText("");

        InputCodigoPago.setToolTipText("Introduce el usuario aqui");

        InputIDOrdenPago.setToolTipText("Introduce el usuario aqui");

        jLabel38.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel38.setText("ID Orden");
        jLabel38.setToolTipText("");

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel39.setText("ID Cliente");
        jLabel39.setToolTipText("");

        InputIDClientePago.setToolTipText("Introduce el usuario aqui");

        jLabel40.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel40.setText("Fecha Pago");
        jLabel40.setToolTipText("");

        InputFechaPago.setToolTipText("Introduce el usuario aqui");

        jLabel41.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel41.setText("Monto Total");
        jLabel41.setToolTipText("");

        InputMontoPago.setToolTipText("Introduce el usuario aqui");

        jLabel42.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel42.setText("Concepto de Pago");
        jLabel42.setToolTipText("");

        InputConceptoPago.setToolTipText("Introduce el usuario aqui");

        jLabel43.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel43.setText("Entidad Emisora");
        jLabel43.setToolTipText("");

        InputEntidadEmisoraPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Bancolombia", "Banco Davivienda", "Banco de Bogot√°", "Banco de Occidente", "Banco Popular", "Banco AV Villas", "Banco BBVA Colombia", "Banco Ita√∫", "Banco GNB Sudameris", "Scotiabank Colpatria", "Banco Agrario de Colombia", "Banco Caja Social", "Banco Falabella", "Banco Serfinanza", "Plataforma Virtual", "Efecty (Efectivo)" }));

        jLabel44.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel44.setText("Estado de Pago");
        jLabel44.setToolTipText("");

        InputPlataformaPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Bancolombia", "Nequi (Bancolombia)", "Daviplata (Davivienda)", "PayPal", "PayU", "Mercado Pago", "Wompi (Bancolombia)", "Movii", "Tpaga", "Powwi", "Dale!", "RappiPay", "Payv√°lida", "Efecty (Efectivo)", "SuRed", "Baloto", "Puntored", "Plataforma Virtual" }));

        InputMetodoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Tarjeta de Cr√©dito", "Tarjeta de D√©bito", "Transferencia Bancaria", "Efectivo", "Pago por PSE", "Tarjeta de Regalo" }));

        jLabel45.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel45.setText("Metodo Pago");
        jLabel45.setToolTipText("");

        PaymentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Pago", "ID Orden", "ID Cliente", "Fecha Pago", "Monto Total", "Concepto de Pago", "Metodo Pago", "Entidad Emisora", "Plataforma", "Estado de Pago"
            }
        ));
        PaymentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PaymentsTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(PaymentsTable);

        BEliminarPayments.setBackground(new java.awt.Color(255, 51, 51));
        BEliminarPayments.setForeground(new java.awt.Color(255, 255, 255));
        BEliminarPayments.setText("Eliminar");
        BEliminarPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEliminarPaymentsActionPerformed(evt);
            }
        });

        BActualizarPayments.setBackground(new java.awt.Color(0, 204, 51));
        BActualizarPayments.setForeground(new java.awt.Color(255, 255, 255));
        BActualizarPayments.setText("Actualizar");
        BActualizarPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarPaymentsActionPerformed(evt);
            }
        });

        BBuscarPayments.setForeground(new java.awt.Color(10, 10, 10));
        BBuscarPayments.setText("Buscar");
        BBuscarPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBuscarPaymentsActionPerformed(evt);
            }
        });

        InputPaymentID.setToolTipText("Introduce el usuario aqui");
        InputPaymentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputPaymentIDActionPerformed(evt);
            }
        });

        jLabel49.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel49.setText("ID");
        jLabel49.setToolTipText("");

        BLimpiarDatosPayments.setText("LimpiarDatos");
        BLimpiarDatosPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLimpiarDatosPaymentsActionPerformed(evt);
            }
        });

        BActualizarPayment.setBackground(new java.awt.Color(0, 153, 255));
        BActualizarPayment.setForeground(new java.awt.Color(255, 255, 255));
        BActualizarPayment.setText("Actualizar Pago");
        BActualizarPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarPaymentActionPerformed(evt);
            }
        });

        BGuardarPayments.setText("Guardar");
        BGuardarPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGuardarPaymentsActionPerformed(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel46.setText("Plataforma");
        jLabel46.setToolTipText("");

        InputEstadoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "En revisi√≥n", "Pendiente", "Completado", "Sancionado", "Fallido" }));

        javax.swing.GroupLayout PaymentsManagerTabLayout = new javax.swing.GroupLayout(PaymentsManagerTab);
        PaymentsManagerTab.setLayout(PaymentsManagerTabLayout);
        PaymentsManagerTabLayout.setHorizontalGroup(
            PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                        .addComponent(BActualizarPayments)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BEliminarPayments)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BBuscarPayments)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel49)
                        .addGap(12, 12, 12)
                        .addComponent(InputPaymentID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BLimpiarDatosPayments)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BActualizarPayment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BGuardarPayments))
                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                        .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputCodigoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel45))
                                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel38)
                                            .addComponent(InputIDOrdenPago, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel39)
                                            .addComponent(InputIDClientePago, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel40)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(InputFechaPago)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel43)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                                .addComponent(InputMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InputEntidadEmisoraPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel46)
                                    .addComponent(InputPlataformaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)))
                        .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel41)
                            .addComponent(InputMontoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InputConceptoPago)
                            .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel42)
                                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 54, Short.MAX_VALUE))
                            .addComponent(InputEstadoPago, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        PaymentsManagerTabLayout.setVerticalGroup(
            PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel37)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputCodigoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputIDOrdenPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputIDClientePago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InputFechaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputMontoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputConceptoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PaymentsManagerTabLayout.createSequentialGroup()
                        .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel41)
                            .addComponent(jLabel42))
                        .addGap(32, 32, 32)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputEntidadEmisoraPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputPlataformaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputEstadoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PaymentsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BActualizarPayments)
                    .addComponent(BEliminarPayments)
                    .addComponent(BBuscarPayments)
                    .addComponent(jLabel49)
                    .addComponent(InputPaymentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BLimpiarDatosPayments)
                    .addComponent(BActualizarPayment)
                    .addComponent(BGuardarPayments, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        MainTabs.addTab("Payments Manager", PaymentsManagerTab);

        jLabel47.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel47.setText("ID Producto");
        jLabel47.setToolTipText("");

        jLabel48.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel48.setText("Nombre Producto");
        jLabel48.setToolTipText("");

        jLabel50.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel50.setText("Costo");
        jLabel50.setToolTipText("");

        jLabel51.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel51.setText("Creacion");
        jLabel51.setToolTipText("");

        jLabel52.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel52.setText("Empresa del Producto");
        jLabel52.setToolTipText("");

        jLabel53.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel53.setText("Tipo Producto");
        jLabel53.setToolTipText("");

        InputTipoProducto.setToolTipText("Introduce el usuario aqui");

        InputEmpresaProducto.setToolTipText("Introduce el usuario aqui");

        InputCreacionProducto.setToolTipText("Introduce el usuario aqui");

        InputCostoProducto.setToolTipText("Introduce el usuario aqui");

        InputNombreProducto.setToolTipText("Introduce el usuario aqui");

        InputIDProducto.setToolTipText("Introduce el usuario aqui");

        InputProveedorProducto.setToolTipText("Introduce el usuario aqui");

        jLabel54.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel54.setText("Proveedor");
        jLabel54.setToolTipText("");

        jLabel55.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel55.setText("Peso en Kg");
        jLabel55.setToolTipText("");

        InputPesoProducto.setToolTipText("Introduce el usuario aqui");
        InputPesoProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputPesoProductoActionPerformed(evt);
            }
        });

        jLabel56.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel56.setText("Stock");
        jLabel56.setToolTipText("");

        InputStockProducto.setToolTipText("Introduce el usuario aqui");
        InputStockProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputStockProductoActionPerformed(evt);
            }
        });

        jLabel57.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel57.setText("Dimensiones");
        jLabel57.setToolTipText("");

        InputDimensionesProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Peque√±o", "Mediano", "Grande", "Industrial" }));

        jLabel58.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel58.setText("Estado de Producto");
        jLabel58.setToolTipText("");

        InputEstadoProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Habilitado", "Deshabilitado", "Proximamente", "Fuera de Stock" }));

        jLabel59.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel59.setText("Peso del Producto");
        jLabel59.setToolTipText("");

        InputTipoPesoProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ligero", "Medio", "Pesado", "Industrial" }));

        ProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Producto", "Nombre Producto", "Costo", "Creacion", "Empresa Producto", "Tipo Producto", "Proveedor", "Peso (Kg)", "Stock", "Dimensiones", "Estado Producto", "Peso (Catalogo)"
            }
        ));
        ProductsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductsTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(ProductsTable);

        InputProductoID.setToolTipText("Introduce el usuario aqui");
        InputProductoID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputProductoIDActionPerformed(evt);
            }
        });

        BBuscarProducto.setForeground(new java.awt.Color(10, 10, 10));
        BBuscarProducto.setText("Buscar");
        BBuscarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBuscarProductoActionPerformed(evt);
            }
        });

        BEliminarProducto.setBackground(new java.awt.Color(255, 51, 51));
        BEliminarProducto.setForeground(new java.awt.Color(255, 255, 255));
        BEliminarProducto.setText("Eliminar");
        BEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEliminarProductoActionPerformed(evt);
            }
        });

        BActualizarProductos.setBackground(new java.awt.Color(0, 204, 51));
        BActualizarProductos.setForeground(new java.awt.Color(255, 255, 255));
        BActualizarProductos.setText("Actualizar");
        BActualizarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarProductosActionPerformed(evt);
            }
        });

        jLabel60.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel60.setText("ID");
        jLabel60.setToolTipText("");

        BLimpiarDatosProductos.setText("LimpiarDatos");
        BLimpiarDatosProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLimpiarDatosProductosActionPerformed(evt);
            }
        });

        BActualizarProducto.setBackground(new java.awt.Color(0, 153, 255));
        BActualizarProducto.setForeground(new java.awt.Color(255, 255, 255));
        BActualizarProducto.setText("Actualizar Producto");
        BActualizarProducto.setToolTipText("");
        BActualizarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarProductoActionPerformed(evt);
            }
        });

        BGuardarProducto.setText("Guardar");
        BGuardarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGuardarProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProductsManagerTabLayout = new javax.swing.GroupLayout(ProductsManagerTab);
        ProductsManagerTab.setLayout(ProductsManagerTabLayout);
        ProductsManagerTabLayout.setHorizontalGroup(
            ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                        .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InputIDProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel54)
                            .addComponent(InputProveedorProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel47))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel48)
                                    .addComponent(InputNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputCostoProducto)
                                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                                        .addComponent(jLabel50)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputCreacionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel51)))
                            .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputPesoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel55))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputStockProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel56))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                                        .addComponent(jLabel57)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(InputDimensionesProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel58)
                            .addComponent(InputEstadoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputEmpresaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel52))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel53)
                                    .addComponent(jLabel59))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(InputTipoPesoProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(InputTipoProducto)))
                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                        .addComponent(BActualizarProductos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BEliminarProducto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BBuscarProducto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel60)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(InputProductoID, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BLimpiarDatosProductos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BActualizarProducto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BGuardarProducto)))
                .addContainerGap())
        );
        ProductsManagerTabLayout.setVerticalGroup(
            ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel47)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputIDProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel48)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InputNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputCostoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                        .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel51)
                            .addComponent(jLabel50)
                            .addComponent(jLabel52))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InputCreacionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputEmpresaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel53)
                        .addGap(32, 32, 32))
                    .addComponent(InputTipoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                            .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel54)
                                .addComponent(jLabel55))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(InputProveedorProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(InputPesoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                            .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel58)
                                .addComponent(jLabel59))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(InputEstadoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(InputTipoPesoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel56)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputStockProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ProductsManagerTabLayout.createSequentialGroup()
                        .addComponent(jLabel57)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputDimensionesProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductsManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BActualizarProductos)
                    .addComponent(BEliminarProducto)
                    .addComponent(BBuscarProducto)
                    .addComponent(jLabel60)
                    .addComponent(InputProductoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BLimpiarDatosProductos)
                    .addComponent(BActualizarProducto)
                    .addComponent(BGuardarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        MainTabs.addTab("Products Manager", ProductsManagerTab);

        jLabel62.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel62.setText("ID Notificacion");
        jLabel62.setToolTipText("");

        jLabel63.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel63.setText("ID Usuario");
        jLabel63.setToolTipText("");

        InputIDUsuario.setToolTipText("Introduce el usuario aqui");

        InputIDNotificacion.setToolTipText("Introduce el usuario aqui");

        jLabel64.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel64.setText("Mensaje");
        jLabel64.setToolTipText("");

        InputMensajeNotificacion.setToolTipText("Introduce el usuario aqui");

        jLabel68.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel68.setText("Estado");
        jLabel68.setToolTipText("");

        InputEstadoNotificacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Leido", "Leido" }));

        InputPrioridadNotificacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Baja", "Normal", "Alta", "Urgente" }));

        jLabel69.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel69.setText("Prioridad");
        jLabel69.setToolTipText("");

        jLabel71.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel71.setText("Asunto");
        jLabel71.setToolTipText("");

        InputAsuntoNotificacion.setToolTipText("Introduce el usuario aqui");

        jLabel72.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel72.setText("Hora Envio");
        jLabel72.setToolTipText("");

        InputHoraEnvioNotificacion.setToolTipText("Introduce el usuario aqui");

        InputFechaNotificacion.setToolTipText("Introduce el usuario aqui");

        jLabel73.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel73.setText("Fecha Envio");
        jLabel73.setToolTipText("");

        NotificationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Notificacion", "ID Usuario", "Fecha Env√≠o", "Hora Envio", "Asunto", "Mensaje", "Estado", "Prioridad"
            }
        ));
        NotificationsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NotificationsTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(NotificationsTable);

        BBuscarNotificacion.setForeground(new java.awt.Color(10, 10, 10));
        BBuscarNotificacion.setText("Buscar");
        BBuscarNotificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBuscarNotificacionActionPerformed(evt);
            }
        });

        BEliminarNotificacion.setBackground(new java.awt.Color(255, 51, 51));
        BEliminarNotificacion.setForeground(new java.awt.Color(255, 255, 255));
        BEliminarNotificacion.setText("Eliminar");
        BEliminarNotificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEliminarNotificacionActionPerformed(evt);
            }
        });

        BActualizarNotificaciones.setBackground(new java.awt.Color(0, 204, 51));
        BActualizarNotificaciones.setForeground(new java.awt.Color(255, 255, 255));
        BActualizarNotificaciones.setText("Actualizar");
        BActualizarNotificaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarNotificacionesActionPerformed(evt);
            }
        });

        InputIDNotificacionPrioridad.setToolTipText("Introduce el usuario aqui");
        InputIDNotificacionPrioridad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputIDNotificacionPrioridadActionPerformed(evt);
            }
        });

        jLabel74.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel74.setText("ID");
        jLabel74.setToolTipText("");

        BLimpiarDatosNotificaciones.setText("LimpiarDatos");
        BLimpiarDatosNotificaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLimpiarDatosNotificacionesActionPerformed(evt);
            }
        });

        BSobreescribirNotificacion.setBackground(new java.awt.Color(0, 153, 255));
        BSobreescribirNotificacion.setForeground(new java.awt.Color(255, 255, 255));
        BSobreescribirNotificacion.setText("Sobreescribir");
        BSobreescribirNotificacion.setToolTipText("");
        BSobreescribirNotificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSobreescribirNotificacionActionPerformed(evt);
            }
        });

        BGuardarNotificacion.setText("Guardar");
        BGuardarNotificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGuardarNotificacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NotificationsTabLayout = new javax.swing.GroupLayout(NotificationsTab);
        NotificationsTab.setLayout(NotificationsTabLayout);
        NotificationsTabLayout.setHorizontalGroup(
            NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotificationsTabLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                        .addComponent(BActualizarNotificaciones)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BEliminarNotificacion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BBuscarNotificacion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel74)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputIDNotificacionPrioridad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BLimpiarDatosNotificaciones)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BSobreescribirNotificacion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BGuardarNotificacion))
                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                        .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NotificationsTabLayout.createSequentialGroup()
                                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputIDNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel64)
                                    .addComponent(jLabel62))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel63)
                                    .addComponent(InputIDUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel73)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE))
                                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(InputFechaNotificacion)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InputHoraEnvioNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel72)))
                            .addComponent(InputMensajeNotificacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NotificationsTabLayout.createSequentialGroup()
                                .addComponent(jLabel71)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(NotificationsTabLayout.createSequentialGroup()
                                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                                        .addComponent(jLabel68)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(InputEstadoNotificacion, 0, 124, Short.MAX_VALUE))
                                .addGap(12, 12, 12)
                                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                                        .addComponent(jLabel69)
                                        .addGap(123, 123, 123))
                                    .addComponent(InputPrioridadNotificacion, 0, 232, Short.MAX_VALUE)))
                            .addComponent(InputAsuntoNotificacion)))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        NotificationsTabLayout.setVerticalGroup(
            NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotificationsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                        .addComponent(jLabel62)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputIDNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                        .addComponent(jLabel63)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InputIDUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputFechaNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                        .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel72)
                            .addComponent(jLabel73)
                            .addComponent(jLabel71))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InputAsuntoNotificacion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputHoraEnvioNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                        .addComponent(jLabel64)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputMensajeNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NotificationsTabLayout.createSequentialGroup()
                        .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel68)
                            .addComponent(jLabel69))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InputEstadoNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InputPrioridadNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NotificationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BActualizarNotificaciones)
                    .addComponent(BEliminarNotificacion)
                    .addComponent(BBuscarNotificacion)
                    .addComponent(jLabel74)
                    .addComponent(InputIDNotificacionPrioridad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BLimpiarDatosNotificaciones)
                    .addComponent(BSobreescribirNotificacion)
                    .addComponent(BGuardarNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        MainTabs.addTab("Notifications", NotificationsTab);

        MainAppSelector.setBackground(new java.awt.Color(240, 240, 240));
        MainAppSelector.setRoundBottomLeft(15);
        MainAppSelector.setRoundBottomRight(15);
        MainAppSelector.setRoundTopLeft(15);
        MainAppSelector.setRoundTopRight(15);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(10, 10, 10));
        jLabel15.setText("AllayNexo");

        jLabel16.setFont(new java.awt.Font("Segoe UI Semilight", 0, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(10, 10, 10));
        jLabel16.setText("v1.0");

        jLabel17.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 51, 51));
        jLabel17.setText("GENERAL");

        OverviewMainPanel.setBackground(new java.awt.Color(227, 227, 227));
        OverviewMainPanel.setRoundBottomLeft(10);
        OverviewMainPanel.setRoundBottomRight(10);
        OverviewMainPanel.setRoundTopLeft(10);
        OverviewMainPanel.setRoundTopRight(10);

        OverviewIcon.setBackground(new java.awt.Color(1, 1, 1));

        BOverivewMain.setBackground(new java.awt.Color(230, 230, 230));
        BOverivewMain.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BOverivewMain.setForeground(new java.awt.Color(0, 0, 0));
        BOverivewMain.setText("Overview");
        BOverivewMain.setBorderPainted(false);
        BOverivewMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOverivewMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OverviewMainPanelLayout = new javax.swing.GroupLayout(OverviewMainPanel);
        OverviewMainPanel.setLayout(OverviewMainPanelLayout);
        OverviewMainPanelLayout.setHorizontalGroup(
            OverviewMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OverviewMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OverviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BOverivewMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        OverviewMainPanelLayout.setVerticalGroup(
            OverviewMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OverviewMainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(OverviewMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OverviewIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BOverivewMain, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap())
        );

        UsersManagerMainPanel.setBackground(new java.awt.Color(227, 227, 227));
        UsersManagerMainPanel.setRoundBottomLeft(10);
        UsersManagerMainPanel.setRoundBottomRight(10);
        UsersManagerMainPanel.setRoundTopLeft(10);
        UsersManagerMainPanel.setRoundTopRight(10);

        BUsersManagerMain.setBackground(new java.awt.Color(230, 230, 230));
        BUsersManagerMain.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BUsersManagerMain.setForeground(new java.awt.Color(0, 0, 0));
        BUsersManagerMain.setText("Users Manager");
        BUsersManagerMain.setBorderPainted(false);
        BUsersManagerMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BUsersManagerMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UsersManagerMainPanelLayout = new javax.swing.GroupLayout(UsersManagerMainPanel);
        UsersManagerMainPanel.setLayout(UsersManagerMainPanelLayout);
        UsersManagerMainPanelLayout.setHorizontalGroup(
            UsersManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UsersManagerMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UsersManagerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BUsersManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        UsersManagerMainPanelLayout.setVerticalGroup(
            UsersManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UsersManagerMainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(UsersManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(UsersManagerIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BUsersManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap())
        );

        OrdersManagerMainPanel.setBackground(new java.awt.Color(227, 227, 227));
        OrdersManagerMainPanel.setRoundBottomLeft(10);
        OrdersManagerMainPanel.setRoundBottomRight(10);
        OrdersManagerMainPanel.setRoundTopLeft(10);
        OrdersManagerMainPanel.setRoundTopRight(10);

        BOrdersManagerMain.setBackground(new java.awt.Color(230, 230, 230));
        BOrdersManagerMain.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BOrdersManagerMain.setForeground(new java.awt.Color(0, 0, 0));
        BOrdersManagerMain.setText("Orders Manager");
        BOrdersManagerMain.setBorderPainted(false);
        BOrdersManagerMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOrdersManagerMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OrdersManagerMainPanelLayout = new javax.swing.GroupLayout(OrdersManagerMainPanel);
        OrdersManagerMainPanel.setLayout(OrdersManagerMainPanelLayout);
        OrdersManagerMainPanelLayout.setHorizontalGroup(
            OrdersManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrdersManagerMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OrdersManagerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BOrdersManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        OrdersManagerMainPanelLayout.setVerticalGroup(
            OrdersManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OrdersManagerMainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(OrdersManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(OrdersManagerIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BOrdersManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel18.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(51, 51, 51));
        jLabel18.setText("TRANSACCIONES");

        ProductManagerMainPanel.setBackground(new java.awt.Color(227, 227, 227));
        ProductManagerMainPanel.setRoundBottomLeft(10);
        ProductManagerMainPanel.setRoundBottomRight(10);
        ProductManagerMainPanel.setRoundTopLeft(10);
        ProductManagerMainPanel.setRoundTopRight(10);

        ProductManagerIcon.setBackground(new java.awt.Color(1, 1, 1));

        BProductManagerMain.setBackground(new java.awt.Color(230, 230, 230));
        BProductManagerMain.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BProductManagerMain.setForeground(new java.awt.Color(0, 0, 0));
        BProductManagerMain.setText("Product Manager");
        BProductManagerMain.setBorderPainted(false);
        BProductManagerMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BProductManagerMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProductManagerMainPanelLayout = new javax.swing.GroupLayout(ProductManagerMainPanel);
        ProductManagerMainPanel.setLayout(ProductManagerMainPanelLayout);
        ProductManagerMainPanelLayout.setHorizontalGroup(
            ProductManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductManagerMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ProductManagerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BProductManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );
        ProductManagerMainPanelLayout.setVerticalGroup(
            ProductManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ProductManagerMainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ProductManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ProductManagerIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BProductManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap())
        );

        PaymentsManagerMainPanel.setBackground(new java.awt.Color(227, 227, 227));
        PaymentsManagerMainPanel.setRoundBottomLeft(10);
        PaymentsManagerMainPanel.setRoundBottomRight(10);
        PaymentsManagerMainPanel.setRoundTopLeft(10);
        PaymentsManagerMainPanel.setRoundTopRight(10);

        PaymentsManagersIcon.setBackground(new java.awt.Color(1, 1, 1));

        BPaymentsManagerMain.setBackground(new java.awt.Color(230, 230, 230));
        BPaymentsManagerMain.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BPaymentsManagerMain.setForeground(new java.awt.Color(0, 0, 0));
        BPaymentsManagerMain.setText("Payments Manager");
        BPaymentsManagerMain.setBorderPainted(false);
        BPaymentsManagerMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPaymentsManagerMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PaymentsManagerMainPanelLayout = new javax.swing.GroupLayout(PaymentsManagerMainPanel);
        PaymentsManagerMainPanel.setLayout(PaymentsManagerMainPanelLayout);
        PaymentsManagerMainPanelLayout.setHorizontalGroup(
            PaymentsManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaymentsManagerMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PaymentsManagersIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BPaymentsManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        PaymentsManagerMainPanelLayout.setVerticalGroup(
            PaymentsManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PaymentsManagerMainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PaymentsManagerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PaymentsManagersIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BPaymentsManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap())
        );

        BMainExportarDatos.setText("Exportar Datos");
        BMainExportarDatos.setToolTipText("");
        BMainExportarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMainExportarDatosActionPerformed(evt);
            }
        });

        BMainImportarDatos.setText("Importar Datos");
        BMainImportarDatos.setToolTipText("");
        BMainImportarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMainImportarDatosActionPerformed(evt);
            }
        });

        jLabel61.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(51, 51, 51));
        jLabel61.setText("DATOS");

        BCerrarSesion.setText("Cerrar Sesion");
        BCerrarSesion.setToolTipText("");
        BCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCerrarSesionActionPerformed(evt);
            }
        });

        PaymentsManagerMainPanel1.setBackground(new java.awt.Color(227, 227, 227));
        PaymentsManagerMainPanel1.setRoundBottomLeft(10);
        PaymentsManagerMainPanel1.setRoundBottomRight(10);
        PaymentsManagerMainPanel1.setRoundTopLeft(10);
        PaymentsManagerMainPanel1.setRoundTopRight(10);

        NotificationsIcon.setBackground(new java.awt.Color(1, 1, 1));

        BNotificationsManagerMain.setBackground(new java.awt.Color(230, 230, 230));
        BNotificationsManagerMain.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BNotificationsManagerMain.setForeground(new java.awt.Color(0, 0, 0));
        BNotificationsManagerMain.setText("Notifications");
        BNotificationsManagerMain.setBorderPainted(false);
        BNotificationsManagerMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BNotificationsManagerMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PaymentsManagerMainPanel1Layout = new javax.swing.GroupLayout(PaymentsManagerMainPanel1);
        PaymentsManagerMainPanel1.setLayout(PaymentsManagerMainPanel1Layout);
        PaymentsManagerMainPanel1Layout.setHorizontalGroup(
            PaymentsManagerMainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaymentsManagerMainPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NotificationsIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BNotificationsManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        PaymentsManagerMainPanel1Layout.setVerticalGroup(
            PaymentsManagerMainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PaymentsManagerMainPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PaymentsManagerMainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NotificationsIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BNotificationsManagerMain, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout MainAppSelectorLayout = new javax.swing.GroupLayout(MainAppSelector);
        MainAppSelector.setLayout(MainAppSelectorLayout);
        MainAppSelectorLayout.setHorizontalGroup(
            MainAppSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainAppSelectorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainAppSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProductManagerMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PaymentsManagerMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OverviewMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UsersManagerMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OrdersManagerMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BMainExportarDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BMainImportarDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MainAppSelectorLayout.createSequentialGroup()
                        .addGroup(MainAppSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainAppSelectorLayout.createSequentialGroup()
                                .addComponent(AllayNexoIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16))
                            .addGroup(MainAppSelectorLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel17))
                            .addComponent(jLabel18)
                            .addComponent(jLabel61))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(BCerrarSesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PaymentsManagerMainPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        MainAppSelectorLayout.setVerticalGroup(
            MainAppSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainAppSelectorLayout.createSequentialGroup()
                .addGroup(MainAppSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AllayNexoIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MainAppSelectorLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(MainAppSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OverviewMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UsersManagerMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OrdersManagerMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProductManagerMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PaymentsManagerMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PaymentsManagerMainPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel61)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BMainImportarDatos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BMainExportarDatos)
                .addGap(5, 5, 5)
                .addComponent(BCerrarSesion)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainAppSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MainAppSelector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MainTabs))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void InputBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputBalanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputBalanceActionPerformed

    private void InputIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputIDActionPerformed

    private void BGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGuardarActionPerformed
        GuardarUsuario();
        LimpiarDatosUsuario();
    }//GEN-LAST:event_BGuardarActionPerformed

    private void BEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEliminarActionPerformed
        eliminarUsusarioID();
        LimpiarDatosUsuario();
    }//GEN-LAST:event_BEliminarActionPerformed

    private void BActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarActionPerformed
        actualizarTablaUsuarios();
    }//GEN-LAST:event_BActualizarActionPerformed

    private void BBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBuscarActionPerformed
        BuscarUsuarioID();
        LimpiarDatosUsuario();
    }//GEN-LAST:event_BBuscarActionPerformed

    private void BActualizarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarUsuarioActionPerformed
        ActualizarUsuarioDatos();
        LimpiarDatosUsuario();
    }//GEN-LAST:event_BActualizarUsuarioActionPerformed

    private void UsersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UsersTableMouseClicked
        int fila = UsersTable.getSelectedRow();
        if (fila != -1) {
            InputNombre.setText((String) UsersTable.getValueAt(fila, 0));
            InputApellido.setText((String) UsersTable.getValueAt(fila, 1));
            InputCedula.setText((String) UsersTable.getValueAt(fila, 2));
            InputEdad.setText((String) UsersTable.getValueAt(fila, 3));
            InputTelefono.setText((String) UsersTable.getValueAt(fila, 4));
            InputEmail.setText((String) UsersTable.getValueAt(fila, 5));
            InputContrase√±a.setText((String) UsersTable.getValueAt(fila, 6));
            InputNivel.setSelectedItem((String) UsersTable.getValueAt(fila, 7));
            InputEstado.setSelectedItem((String) UsersTable.getValueAt(fila, 8));
            InputBalance.setText((String) UsersTable.getValueAt(fila, 9));
            InputID.setText((String) UsersTable.getValueAt(fila, 10));
        }
    }//GEN-LAST:event_UsersTableMouseClicked

    private void BLimpiarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLimpiarDatosActionPerformed
        LimpiarDatosUsuario();
    }//GEN-LAST:event_BLimpiarDatosActionPerformed

    private void BUsersManagerMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BUsersManagerMainActionPerformed
        MainTabs.setSelectedIndex(1);
        actualizarTablaUsuarios();
    }//GEN-LAST:event_BUsersManagerMainActionPerformed

    private void BOverivewMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOverivewMainActionPerformed
        MainTabs.setSelectedIndex(0);
        cargarTotalesAdministrador();
    }//GEN-LAST:event_BOverivewMainActionPerformed

    private void InputFechaCreacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFechaCreacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputFechaCreacionActionPerformed

    private void InputFechaEstimadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFechaEstimadaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputFechaEstimadaActionPerformed

    private void BOrdersManagerMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOrdersManagerMainActionPerformed
        MainTabs.setSelectedIndex(2);
        cargarOrdenesATabla();
    }//GEN-LAST:event_BOrdersManagerMainActionPerformed

    private void OrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrdersTableMouseClicked
        int fila = OrdersTable.getSelectedRow();
        if (fila >= 0) {
            InputDestino.setText(OrdersTable.getValueAt(fila, 0).toString());
            InputOrigen.setText(OrdersTable.getValueAt(fila, 1).toString());
            InputEnvio.setText(OrdersTable.getValueAt(fila, 2).toString());

            InputOrderID.setText(OrdersTable.getValueAt(fila, 3).toString());
            InputCliente.setText(OrdersTable.getValueAt(fila, 4).toString());

            InputTelefonoCliente.setText(OrdersTable.getValueAt(fila, 5).toString());
            InputEmailCliente.setText(OrdersTable.getValueAt(fila, 6).toString());
            InputCodigoTracking.setText(OrdersTable.getValueAt(fila, 7).toString());

            InputFechaCreacion.setText(OrdersTable.getValueAt(fila, 8).toString());
            InputFechaEstimada.setText(OrdersTable.getValueAt(fila, 9).toString());

            InputEstadoOrder.setSelectedItem(OrdersTable.getValueAt(fila, 10).toString());
            InputEntregaOrder.setSelectedItem(OrdersTable.getValueAt(fila, 11).toString());
            InputPesoPaqueteOrder.setSelectedItem(OrdersTable.getValueAt(fila, 12).toString());
        }
    }//GEN-LAST:event_OrdersTableMouseClicked

    private void BActualizarOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarOrdersActionPerformed
        cargarOrdenesATabla();
    }//GEN-LAST:event_BActualizarOrdersActionPerformed

    private void BEliminarOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEliminarOrdersActionPerformed
        eliminarOrden();
        limpiarCamposOrden();
    }//GEN-LAST:event_BEliminarOrdersActionPerformed

    private void BBuscarOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBuscarOrdersActionPerformed
        buscarOrden();
        limpiarCamposOrden();
    }//GEN-LAST:event_BBuscarOrdersActionPerformed

    private void InputOrderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputOrderIDActionPerformed
        limpiarCamposOrden();
    }//GEN-LAST:event_InputOrderIDActionPerformed

    private void BLimpiarDatosOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLimpiarDatosOrdersActionPerformed
        limpiarCamposOrden();
    }//GEN-LAST:event_BLimpiarDatosOrdersActionPerformed

    private void BActualizarOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarOrderActionPerformed
        actualizarOrden();
        cargarOrdenesATabla();
    }//GEN-LAST:event_BActualizarOrderActionPerformed

    private void BGuardarOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGuardarOrdersActionPerformed
        guardarOrden();
        cargarOrdenesATabla();
        limpiarCamposOrden();
    }//GEN-LAST:event_BGuardarOrdersActionPerformed

    private void PaymentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PaymentsTableMouseClicked
        llenarCamposDesdeTablaPagos();
    }//GEN-LAST:event_PaymentsTableMouseClicked

    private void BEliminarPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEliminarPaymentsActionPerformed
        eliminarPago();
    }//GEN-LAST:event_BEliminarPaymentsActionPerformed

    private void BActualizarPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarPaymentsActionPerformed
        actualizarTablaPagos();
    }//GEN-LAST:event_BActualizarPaymentsActionPerformed

    private void BBuscarPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBuscarPaymentsActionPerformed
        buscarPagoPorOrden();
        limpiarCamposPagos();
    }//GEN-LAST:event_BBuscarPaymentsActionPerformed

    private void InputPaymentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputPaymentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputPaymentIDActionPerformed

    private void BLimpiarDatosPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLimpiarDatosPaymentsActionPerformed
        limpiarCamposPagos();
    }//GEN-LAST:event_BLimpiarDatosPaymentsActionPerformed

    private void BActualizarPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarPaymentActionPerformed
        actualizarPagoSeleccionado();
        limpiarCamposPagos();
    }//GEN-LAST:event_BActualizarPaymentActionPerformed

    private void BGuardarPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGuardarPaymentsActionPerformed
        guardarPago();
    }//GEN-LAST:event_BGuardarPaymentsActionPerformed

    private void BPaymentsManagerMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPaymentsManagerMainActionPerformed
        MainTabs.setSelectedIndex(3);
        actualizarTablaPagos();
    }//GEN-LAST:event_BPaymentsManagerMainActionPerformed

    private void InputStockProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputStockProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputStockProductoActionPerformed

    private void ProductsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsTableMouseClicked
        int filaSeleccionada = ProductsTable.getSelectedRow();

        if (filaSeleccionada == -1) {
            return;
        }

        rellenarCamposConDatosProducto(filaSeleccionada);
    }//GEN-LAST:event_ProductsTableMouseClicked

    private void InputProductoIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputProductoIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputProductoIDActionPerformed

    private void BBuscarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBuscarProductoActionPerformed
        buscarProductoPorID();
    }//GEN-LAST:event_BBuscarProductoActionPerformed

    private void BEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEliminarProductoActionPerformed
        eliminarProducto();
    }//GEN-LAST:event_BEliminarProductoActionPerformed

    private void BActualizarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarProductosActionPerformed
        actualizarTablaProductos();
    }//GEN-LAST:event_BActualizarProductosActionPerformed

    private void BLimpiarDatosProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLimpiarDatosProductosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BLimpiarDatosProductosActionPerformed

    private void BActualizarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarProductoActionPerformed
        actualizarProducto();
    }//GEN-LAST:event_BActualizarProductoActionPerformed

    private void BGuardarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGuardarProductoActionPerformed
        guardarProducto();
    }//GEN-LAST:event_BGuardarProductoActionPerformed

    private void InputPesoProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputPesoProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputPesoProductoActionPerformed

    private void BProductManagerMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BProductManagerMainActionPerformed
        MainTabs.setSelectedIndex(4);
        actualizarTablaProductos();
    }//GEN-LAST:event_BProductManagerMainActionPerformed

    private void BMainExportarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMainExportarDatosActionPerformed
        exportarArchivoActual();
    }//GEN-LAST:event_BMainExportarDatosActionPerformed

    private void BMainImportarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMainImportarDatosActionPerformed
        importarArchivoActual();
    }//GEN-LAST:event_BMainImportarDatosActionPerformed

    private void BCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCerrarSesionActionPerformed
        AllayNexoLogin allay = new AllayNexoLogin();
        allay.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BCerrarSesionActionPerformed

    private void BNotificationsManagerMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BNotificationsManagerMainActionPerformed
        MainTabs.setSelectedIndex(5);
        cargarNotificacionesATabla();
    }//GEN-LAST:event_BNotificationsManagerMainActionPerformed

    private void NotificationsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NotificationsTableMouseClicked
        cargarDatosNotificacionSeleccionada();
    }//GEN-LAST:event_NotificationsTableMouseClicked

    private void BBuscarNotificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBuscarNotificacionActionPerformed
        buscarNotificacionPorID();
        limpiarCamposNotificacion();
    }//GEN-LAST:event_BBuscarNotificacionActionPerformed

    private void BEliminarNotificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEliminarNotificacionActionPerformed
        eliminarNotificacion();
        limpiarCamposNotificacion();
    }//GEN-LAST:event_BEliminarNotificacionActionPerformed

    private void BActualizarNotificacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarNotificacionesActionPerformed
        cargarNotificacionesATabla();
    }//GEN-LAST:event_BActualizarNotificacionesActionPerformed

    private void InputIDNotificacionPrioridadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputIDNotificacionPrioridadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputIDNotificacionPrioridadActionPerformed

    private void BLimpiarDatosNotificacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLimpiarDatosNotificacionesActionPerformed
        limpiarCamposNotificacion();
    }//GEN-LAST:event_BLimpiarDatosNotificacionesActionPerformed

    private void BSobreescribirNotificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSobreescribirNotificacionActionPerformed
        sobrescribirNotificacion();
        limpiarCamposNotificacion();
    }//GEN-LAST:event_BSobreescribirNotificacionActionPerformed

    private void BGuardarNotificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGuardarNotificacionActionPerformed
        guardarNotificacion();
        limpiarCamposNotificacion();
    }//GEN-LAST:event_BGuardarNotificacionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AllayMainApp().setVisible(true);
            }
        });
    }

    private void cargarTotalesAdministrador() {
        int totalUsuarios = 0;
        int totalSancionados = 0;
        int totalProductos = 0;
        int totalPedidos = 0;

        File archivoUsuarios = new File("usuarios.txt");
        if (archivoUsuarios.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(archivoUsuarios))) {
                String linea;
                while ((linea = br.readLine()) != null) {
                    if (linea.trim().isEmpty()) {
                        continue;
                    }
                    String[] datos = linea.split(",");
                    if (datos.length >= 10) {
                        totalUsuarios++;
                        if (datos[9].equalsIgnoreCase("Sancionado")) {
                            totalSancionados++;
                        }
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer usuarios.txt: " + e.getMessage());
            }
        }

        File archivoProductos = new File("productos.txt");
        if (archivoProductos.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(archivoProductos))) {
                String linea;
                while ((linea = br.readLine()) != null) {
                    if (!linea.trim().isEmpty()) {
                        totalProductos++;
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer productos.txt: " + e.getMessage());
            }
        }

        File archivoOrdenes = new File("ordenes.txt");
        if (archivoOrdenes.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(archivoOrdenes))) {
                String linea;
                while ((linea = br.readLine()) != null) {
                    if (!linea.trim().isEmpty()) {
                        totalPedidos++;
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer ordenes.txt: " + e.getMessage());
            }
        }

        TotalUsuariosOverview.setText(String.valueOf(totalUsuarios));
        TotalSancionesOverview.setText(String.valueOf(totalSancionados));
        TotalProductosOverview.setText(String.valueOf(totalProductos));
        TotalPedidosOverview.setText(String.valueOf(totalPedidos));
    }

    private void BuscarUsuarioID() {
        String idBuscado = InputID.getText().trim();
        if (idBuscado.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese un ID para buscar.");
            return;
        }

        List<Usuario> usuarios = leerUsuariosDesdeArchivo();
        DefaultTableModel modelo = (DefaultTableModel) UsersTable.getModel();
        modelo.setRowCount(0);

        boolean encontrado = false;
        for (Usuario u : usuarios) {
            if (u.id.equals(idBuscado)) {
                InputNombre.setText(u.nombre);
                InputApellido.setText(u.apellido);
                InputCedula.setText(u.cedula);
                InputEdad.setText(u.edad);
                InputTelefono.setText(u.telefono);
                InputEmail.setText(u.email);
                InputContrase√±a.setText(u.contrase√±a);
                InputNivel.setSelectedItem(u.nivel);
                InputEstado.setSelectedItem(u.estado);
                InputBalance.setText(u.balance);

                modelo.addRow(new Object[]{
                    u.nombre, u.apellido, u.cedula, u.edad, u.telefono,
                    u.email, u.contrase√±a, u.nivel, u.estado, u.balance, u.id
                });

                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(null, "Usuario no encontrado.");
        }
    }

    private void actualizarTablaUsuarios() {
        String[] columnas = {"Nombre", "Apellido", "Cedula", "Edad", "Telefono", "Email", "Contrase√±a", "Nivel", "Estado", "Balance", "ID"};
        java.util.List<Usuario> usuarios = leerUsuariosDesdeArchivo();
        String[][] datos = new String[usuarios.size()][11];
        for (int i = 0; i < usuarios.size(); i++) {
            Usuario u = usuarios.get(i);
            datos[i][0] = u.nombre;
            datos[i][1] = u.apellido;
            datos[i][2] = u.cedula;
            datos[i][3] = u.edad;
            datos[i][4] = u.telefono;
            datos[i][5] = u.email;
            datos[i][6] = u.contrase√±a;
            datos[i][7] = u.nivel;
            datos[i][8] = u.estado;
            datos[i][9] = u.balance;
            datos[i][10] = u.id;
        }
        UsersTable.setModel(new javax.swing.table.DefaultTableModel(datos, columnas));
    }

    private List<Usuario> leerUsuariosDesdeArchivo() {
        List<Usuario> lista = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("usuarios.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length == 11) {
                    Usuario u = new Usuario(
                            partes[0], partes[1], partes[2], partes[3], partes[4],
                            partes[5], partes[6], partes[7], partes[8], partes[9], partes[10]
                    );
                    lista.add(u);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al leer archivo: " + e.getMessage());
        }
        return lista;
    }

    private void eliminarUsusarioID() {
        String id = InputID.getText().trim();
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo ID no puede estar vac√≠o.");
            return;
        }

        List<Usuario> usuarios = leerUsuariosDesdeArchivo();
        boolean eliminado = usuarios.removeIf(u -> u.id.equals(id));

        if (eliminado) {
            guardarTodosLosUsuarios(usuarios);
            actualizarTablaUsuarios();
            JOptionPane.showMessageDialog(null, "Usuario eliminado correctamente.");
        } else {
            JOptionPane.showMessageDialog(null, "No se encontr√≥ un usuario con ese ID.");
        }
    }

    private void LimpiarDatosUsuario() {
        InputID.setText("");
        InputNombre.setText("");
        InputApellido.setText("");
        InputCedula.setText("");
        InputEdad.setText("");
        InputTelefono.setText("");
        InputEmail.setText("");
        InputContrase√±a.setText("");
        InputBalance.setText("");

        if (InputNivel.getItemCount() > 0) {
            InputNivel.setSelectedIndex(0);
        }
        if (InputEstado.getItemCount() > 0) {
            InputEstado.setSelectedIndex(0);
        }

        UsersTable.clearSelection();
    }

    private void GuardarUsuario() {
        String id = InputID.getText().trim();
        List<Usuario> usuarios = leerUsuariosDesdeArchivo();
        Set<Integer> idsExistentes = new HashSet<>();

        for (Usuario u : usuarios) {
            try {
                idsExistentes.add(Integer.parseInt(u.id));
            } catch (NumberFormatException e) {
                // Ignorar IDs no numericos
            }
        }

        int idFinal;
        if (id.isEmpty()) {
            idFinal = 1;
        } else {
            try {
                idFinal = Integer.parseInt(id);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El ID debe ser num√©rico.");
                return;
            }
        }

        while (idsExistentes.contains(idFinal)) {
            idFinal++;
        }

        Usuario nuevo = new Usuario(
                String.valueOf(idFinal),
                InputNombre.getText().trim(),
                InputApellido.getText().trim(),
                InputCedula.getText().trim(),
                InputEdad.getText().trim(),
                InputTelefono.getText().trim(),
                InputEmail.getText().trim(),
                InputContrase√±a.getText().trim(),
                (String) InputNivel.getSelectedItem(),
                (String) InputEstado.getSelectedItem(),
                InputBalance.getText().trim()
        );

        guardarUsuarioEnArchivoOrdenado(nuevo);
        actualizarTablaUsuarios();
        JOptionPane.showMessageDialog(null, "Usuario guardado correctamente con ID: " + idFinal);
    }

    private void ActualizarUsuarioDatos() {
        int filaSeleccionada = UsersTable.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, selecciona un usuario para actualizar.");
            return;
        }

        String nuevoID = InputID.getText().trim();
        if (nuevoID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo ID no puede estar vac√≠o.");
            return;
        }

        if (!nuevoID.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "El ID debe ser num√©rico.");
            return;
        }

        List<Usuario> usuarios = leerUsuariosDesdeArchivo();
        String idOriginal = UsersTable.getValueAt(filaSeleccionada, 10).toString();
        boolean emailActualizado = false;
        boolean balanceActualizado = false;
        String emailAnterior = "";
        String balanceAnterior = "";

        for (Usuario u : usuarios) {
            if (u.id.equals(nuevoID) && !u.id.equals(idOriginal)) {
                JOptionPane.showMessageDialog(null, "Ya existe otro usuario con ese ID.");
                return;
            }

            if (u.id.equals(idOriginal)) {
                emailAnterior = u.email;
                balanceAnterior = u.balance;
            }
        }

        boolean actualizado = false;
        for (int i = 0; i < usuarios.size(); i++) {
            if (usuarios.get(i).id.equals(idOriginal)) {
                String nuevoBalance = InputBalance.getText().trim();

                if (!nuevoBalance.equals(balanceAnterior)) {
                    balanceActualizado = true;
                }

                usuarios.set(i, new Usuario(
                        nuevoID,
                        InputNombre.getText().trim(),
                        InputApellido.getText().trim(),
                        InputCedula.getText().trim(),
                        InputEdad.getText().trim(),
                        InputTelefono.getText().trim(),
                        InputEmail.getText().trim(),
                        InputContrase√±a.getText().trim(),
                        (String) InputNivel.getSelectedItem(),
                        (String) InputEstado.getSelectedItem(),
                        nuevoBalance
                ));
                actualizado = true;

                if (!InputEmail.getText().trim().equals(emailAnterior)) {
                    crearNotificacion(nuevoID, "Actualizaci√≥n de correo", "Tu correo ha sido actualizado correctamente.", "Alta");
                }

                if (balanceActualizado) {
                    crearNotificacion(nuevoID, "Actualizaci√≥n de balance", "Tu balance ha sido actualizado correctamente.", "Alta");
                } else {
                    crearNotificacion(nuevoID, "Actualizaci√≥n de usuario", "Tus datos han sido actualizados correctamente.", "Normal");
                }

                cargarNotificacionesATabla();
                break;
            }
        }

        if (actualizado) {
            usuarios.sort((u1, u2) -> {
                try {
                    return Integer.parseInt(u1.id) - Integer.parseInt(u2.id);
                } catch (NumberFormatException e) {
                    return u1.id.compareTo(u2.id);
                }
            });
            guardarTodosLosUsuarios(usuarios);
            actualizarTablaUsuarios();
            JOptionPane.showMessageDialog(null, "Usuario actualizado correctamente y reordenado por ID.");
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo actualizar el usuario.");
        }
    }

    private void crearNotificacion(String idUsuario, String asunto, String mensaje, String prioridad) {
        String idNotificacion = generarIDNotificacionUnica();
        String fecha = obtenerFechaActual();

        String estado = "No Le√≠do";

        guardarNotificacionGenerica(idNotificacion, idUsuario, fecha, asunto, mensaje, estado, prioridad);

        JOptionPane.showMessageDialog(null, "Notificaci√≥n enviada: " + mensaje);
    }

    private String generarIDNotificacionUnica() {
        File archivo = new File("notificaciones.txt");
        Set<String> idsExistentes = new HashSet<>();
        int contador = 1;

        try {
            if (!archivo.exists()) {
                archivo.createNewFile();
            } else {
                BufferedReader br = new BufferedReader(new FileReader(archivo));
                String linea;
                while ((linea = br.readLine()) != null) {
                    String[] datos = linea.split(",", -1);
                    if (datos.length > 0) {
                        idsExistentes.add(datos[0]);
                    }
                }
                br.close();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error leyendo el archivo de notificaciones: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        String idNotificacion;
        do {
            idNotificacion = String.format("NOT%06d", contador);
            contador++;
        } while (idsExistentes.contains(idNotificacion));

        return idNotificacion;
    }

    private String obtenerFechaActual() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy,HH:mm");
        Date fecha = new Date();
        return sdf.format(fecha);
    }

    private void guardarNotificacionGenerica(String idNotificacion, String idUsuario, String fechaEnvio, String asunto, String mensaje, String estado, String prioridad) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("notificaciones.txt", true))) {
            bw.write(idNotificacion + "," + idUsuario + "," + fechaEnvio + "," + asunto + "," + mensaje + "," + estado + "," + prioridad);
            bw.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error guardando la notificaci√≥n: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void guardarUsuarioEnArchivoOrdenado(Usuario nuevo) {
        List<Usuario> usuarios = leerUsuariosDesdeArchivo();
        usuarios.add(nuevo);

        usuarios.sort(Comparator.comparingInt(u -> Integer.parseInt(u.id)));

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("usuarios.txt"))) {
            for (Usuario u : usuarios) {
                writer.write(u.id + "," + u.nombre + "," + u.apellido + "," + u.cedula + ","
                        + u.edad + "," + u.telefono + "," + u.email + "," + u.contrase√±a + ","
                        + u.nivel + "," + u.estado + "," + u.balance);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al guardar el usuario.");
        }
    }

    private void guardarTodosLosUsuarios(List<Usuario> usuarios) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("usuarios.txt"))) {
            for (Usuario u : usuarios) {
                bw.write(u.toFileLine());
                bw.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar todos los usuarios: " + e.getMessage());
        }
    }

    class Usuario {

        String id, nombre, apellido, cedula, edad, telefono, email, contrase√±a, nivel, estado, balance;

        Usuario(String id, String nombre, String apellido, String cedula, String edad,
                String telefono, String email, String contrase√±a, String nivel,
                String estado, String balance) {
            this.id = id;
            this.nombre = nombre;
            this.apellido = apellido;
            this.cedula = cedula;
            this.edad = edad;
            this.telefono = telefono;
            this.email = email;
            this.contrase√±a = contrase√±a;
            this.nivel = nivel;
            this.estado = estado;
            this.balance = balance;
        }

        String toFileLine() {
            return String.join(",", id, nombre, apellido, cedula, edad, telefono, email, contrase√±a, nivel, estado, balance);
        }
    }

    private void setCenteredZoomedIcon(JLabel label, String imagePath, int zoomPercent) {
        try {
            ImageIcon originalIcon = new ImageIcon(getClass().getResource(imagePath));
            Image originalImage = originalIcon.getImage();

            int originalWidth = originalIcon.getIconWidth();
            int originalHeight = originalIcon.getIconHeight();

            zoomPercent = Math.max(1, Math.min(zoomPercent, 100));

            double scaleFactor = zoomPercent / 100.0;
            int cropSize = (int) (Math.min(originalWidth, originalHeight) * scaleFactor);

            int cropX = (originalWidth - cropSize) / 2;
            int cropY = (originalHeight - cropSize) / 2;

            BufferedImage croppedImage = new BufferedImage(cropSize, cropSize, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = croppedImage.createGraphics();
            g.drawImage(originalImage, 0, 0, cropSize, cropSize, cropX, cropY, cropX + cropSize, cropY + cropSize, null);
            g.dispose();

            int targetWidth = label.getWidth() > 0 ? label.getWidth() : label.getPreferredSize().width;
            int targetHeight = label.getHeight() > 0 ? label.getHeight() : label.getPreferredSize().height;

            Image scaledImage = croppedImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);
            label.setIcon(new ImageIcon(scaledImage));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initializeImages() {
        setCenteredZoomedIcon(AllayNexoIcon, "/UISources/AllayNexo.png", 50);
        setCenteredZoomedIcon(OverviewIcon, "/UISources/OverviewIcon.png", 100);
        setCenteredZoomedIcon(UsersManagerIcon, "/UISources/Users.png", 100);
        setCenteredZoomedIcon(OrdersManagerIcon, "/UISources/Orders.png", 100);
        setCenteredZoomedIcon(ProductManagerIcon, "/UISources/Products.png", 100);
        setCenteredZoomedIcon(PaymentsManagersIcon, "/UISources/Payments.png", 100);
        setCenteredZoomedIcon(NotificationsIcon, "/UISources/Payments.png", 100);
        setCenteredZoomedIcon(TotalUsuariosOverviewIcon, "/UISources/UserProfile.png", 100);
        setCenteredZoomedIcon(TotalSancionesOverviewIcon, "/UISources/Banned.png", 100);
        setCenteredZoomedIcon(TotalProductosOverviewIcon, "/UISources/ProductsIcon.png", 100);
        setCenteredZoomedIcon(TotalPedidosOverviewIcon, "/UISources/Delivery.png", 100);
    }

    private void initializeApp() {
        MainTabs.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        MainTabs.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
            @Override
            protected int calculateTabAreaHeight(int tabPlacement, int runCount, int maxTabHeight) {
                return 0;
            }

            @Override
            protected void paintTabArea(Graphics g, int tabPlacement, int selectedIndex) {
                // Ocultar la barra de tabs
            }
        });

        initializeImages();
    }

    //EXPORTAR
    private void exportarArchivoActual() {
        String[] opciones = {"TXT", "CSV"};
        int eleccion = JOptionPane.showOptionDialog(
                this,
                "¬øEn qu√© formato deseas exportar?",
                "Exportar",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0]
        );

        if (eleccion == -1) {
            return;
        }
        String extension = eleccion == 0 ? ".txt" : ".csv";

        int pesta√±a = MainTabs.getSelectedIndex();
        String archivoFuente = "";
        String nombreSugerido = "";

        switch (pesta√±a) {
            case 1 -> {
                archivoFuente = "usuarios.txt";
                nombreSugerido = "usuarios_exportado" + extension;
            }
            case 2 -> {
                archivoFuente = "ordenes.txt";
                nombreSugerido = "ordenes_exportadas" + extension;
            }
            case 3 -> {
                archivoFuente = "pagos.txt";
                nombreSugerido = "pagos_exportados" + extension;
            }
            case 4 -> {
                archivoFuente = "productos.txt";
                nombreSugerido = "productos_exportados" + extension;
            }
            default -> {
                JOptionPane.showMessageDialog(this, "No hay datos exportables en esta pesta√±a.");
                return;
            }
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar archivo exportado");
        fileChooser.setSelectedFile(new File(nombreSugerido));

        int seleccion = fileChooser.showSaveDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivoDestino = fileChooser.getSelectedFile();

            if (!archivoDestino.getName().toLowerCase().endsWith(extension)) {
                archivoDestino = new File(archivoDestino.getAbsolutePath() + extension);
            }

            try (BufferedReader reader = new BufferedReader(new FileReader(archivoFuente)); BufferedWriter writer = new BufferedWriter(new FileWriter(archivoDestino))) {

                String linea;
                while ((linea = reader.readLine()) != null) {
                    writer.write(linea);
                    writer.newLine();
                }

                JOptionPane.showMessageDialog(this, "Archivo exportado exitosamente.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al exportar el archivo.");
                e.printStackTrace();
            }
        }
    }

    //IMPORTAR
    private void importarArchivoActual() {
        int pesta√±a = MainTabs.getSelectedIndex();
        String archivoDestino = "";
        Runnable accionRecarga = () -> {
        };

        switch (pesta√±a) {
            case 1 -> {
                archivoDestino = "usuarios.txt";
                accionRecarga = this::actualizarTablaUsuarios;
            }
            case 2 -> {
                archivoDestino = "ordenes.txt";
                accionRecarga = this::cargarOrdenesATabla;
            }
            case 3 -> {
                archivoDestino = "pagos.txt";
                accionRecarga = this::actualizarTablaPagos;
            }
            case 4 -> {
                archivoDestino = "productos.txt";
                accionRecarga = this::actualizarTablaProductos;
            }
            default -> {
                JOptionPane.showMessageDialog(this, "No puedes importar datos en esta pesta√±a.");
                return;
            }
        }

        String[] opciones = {"TXT", "CSV"};
        int eleccion = JOptionPane.showOptionDialog(
                this,
                "¬øQu√© tipo de archivo deseas importar?",
                "Importar archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0]
        );

        if (eleccion == -1) {
            return;
        }
        String extensionEsperada = eleccion == 0 ? ".txt" : ".csv";

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar archivo para importar");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos " + extensionEsperada, extensionEsperada.substring(1));
        fileChooser.setFileFilter(filter);

        int seleccion = fileChooser.showOpenDialog(this);

        if (seleccion != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File archivoImportado = fileChooser.getSelectedFile();
        if (!archivoImportado.getName().toLowerCase().endsWith(extensionEsperada)) {
            JOptionPane.showMessageDialog(this, "El archivo seleccionado no es un " + extensionEsperada);
            return;
        }

        try (
                BufferedReader reader = new BufferedReader(new FileReader(archivoImportado)); BufferedWriter writer = new BufferedWriter(new FileWriter(archivoDestino, false))) {
            String linea;
            boolean primeraLinea = true;
            int lineasValidas = 0;

            while ((linea = reader.readLine()) != null) {
                String[] columnas = linea.split(",");
                int esperado = switch (pesta√±a) {
                    case 1 ->
                        11; // usuarios
                    case 2 ->
                        13; // ordenes
                    case 3 ->
                        10; // pagos
                    case 4 ->
                        11; // productos
                    default ->
                        0;
                };

                if (columnas.length < esperado) {
                    if (primeraLinea) {
                        JOptionPane.showMessageDialog(this, "El archivo no tiene el formato esperado. Aseg√∫rate de importar el archivo correcto.");
                        return;
                    }
                    continue;
                }

                writer.write(linea);
                writer.newLine();
                lineasValidas++;
                primeraLinea = false;
            }

            if (lineasValidas == 0) {
                JOptionPane.showMessageDialog(this, "No se encontraron datos v√°lidos para importar.");
                return;
            }

            JOptionPane.showMessageDialog(this, "Archivo importado correctamente.");
            accionRecarga.run();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al importar el archivo.");
            e.printStackTrace();
        }

        actualizarTablaUsuarios();

        cargarOrdenesATabla();

        actualizarTablaPagos();

        actualizarTablaProductos();
    }

    // ORDENES
    private final String ORDER_FILE = "ordenes.txt";

    private void guardarOrden() {
        String orderID = InputOrderID.getText().trim();

        Set<Integer> idsExistentes = obtenerIDsExistentes();

        int idFinal;
        if (orderID.isEmpty()) {
            idFinal = obtenerSiguienteIDDesde(1, idsExistentes);
        } else {
            try {
                int idIngresado = Integer.parseInt(orderID);
                idFinal = idsExistentes.contains(idIngresado)
                        ? obtenerSiguienteIDDesde(idIngresado + 1, idsExistentes)
                        : idIngresado;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID de orden debe ser num√©rico.");
                return;
            }
        }

        String trackingID = generarCodigoTrackingUnico();

        String destino = InputDestino.getText();
        String origen = InputOrigen.getText();
        String costoEnvio = InputEnvio.getText();
        String idCliente = InputCliente.getText();
        String telefonoCliente = InputTelefonoCliente.getText();
        String emailCliente = InputEmailCliente.getText();
        String fechaCreacion = InputFechaCreacion.getText();
        String fechaEstimada = InputFechaEstimada.getText();
        String estado = (String) InputEstadoOrder.getSelectedItem();
        String tipoEntrega = (String) InputEntregaOrder.getSelectedItem();
        String peso = (String) InputPesoPaqueteOrder.getSelectedItem();

        if (destino.isEmpty() || origen.isEmpty() || costoEnvio.isEmpty() || idCliente.isEmpty()
                || telefonoCliente.isEmpty() || emailCliente.isEmpty()
                || fechaCreacion.isEmpty() || fechaEstimada.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos.");
            return;
        }

        try {
            List<String> ordenes = new ArrayList<>();
            BufferedReader reader = new BufferedReader(new FileReader(ORDER_FILE));
            String line;
            while ((line = reader.readLine()) != null) {
                ordenes.add(line);
            }
            reader.close();

            String nuevaOrden = destino + "," + origen + "," + costoEnvio + "," + idFinal + "," + idCliente + ","
                    + telefonoCliente + "," + emailCliente + "," + trackingID + "," + fechaCreacion + ","
                    + fechaEstimada + "," + estado + "," + tipoEntrega + "," + peso;

            ordenes.add(nuevaOrden);
            ordenes.sort(Comparator.comparingInt(o -> Integer.parseInt(o.split(",")[3])));

            BufferedWriter writer = new BufferedWriter(new FileWriter(ORDER_FILE));
            for (String orden : ordenes) {
                writer.write(orden);
                writer.newLine();
            }
            writer.close();

            JOptionPane.showMessageDialog(this, "Orden guardada correctamente con ID: " + idFinal);
            cargarOrdenesATabla();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar la orden.");
        }
    }

    private Set<Integer> obtenerIDsExistentes() {
        Set<Integer> ids = new HashSet<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(ORDER_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] datos = line.split(",");
                if (datos.length >= 4) {
                    try {
                        ids.add(Integer.parseInt(datos[3]));
                    } catch (NumberFormatException ignored) {
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ids;
    }

    private int obtenerSiguienteIDDesde(int inicio, Set<Integer> existentes) {
        while (existentes.contains(inicio)) {
            inicio++;
        }
        return inicio;
    }

    private void actualizarOrden() {
        String nuevoID = InputOrderID.getText().trim();
        String nuevoTracking = InputCodigoTracking.getText().trim();

        if (nuevoID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de orden.");
            return;
        }

        if (nuevoTracking.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un c√≥digo de tracking.");
            return;
        }

        int filaSeleccionada = OrdersTable.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una orden en la tabla.");
            return;
        }

        String idActual = OrdersTable.getValueAt(filaSeleccionada, 3).toString();
        String trackingActual = OrdersTable.getValueAt(filaSeleccionada, 7).toString();

        if (!nuevoID.equals(idActual) && ordenIDYaExiste(nuevoID)) {
            JOptionPane.showMessageDialog(this, "Ya existe una orden con ese ID. Use uno diferente.");
            return;
        }

        if (!nuevoTracking.equals(trackingActual) && codigoTrackingYaExiste(nuevoTracking)) {
            JOptionPane.showMessageDialog(this, "Ya existe una orden con ese c√≥digo de tracking. Use uno diferente.");
            return;
        }

        try {
            File inputFile = new File(ORDER_FILE);
            File tempFile = new File("temp_ordenes.txt");

            boolean updated = false;
            List<String> ordenes = new ArrayList<>();

            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] datos = line.split(",");
                    if (datos.length >= 13) {
                        if (datos[3].equals(idActual)) {
                            String nuevaLinea = String.join(",",
                                    InputDestino.getText().trim(),
                                    InputOrigen.getText().trim(),
                                    InputEnvio.getText().trim(),
                                    nuevoID,
                                    InputCliente.getText().trim(),
                                    InputTelefonoCliente.getText().trim(),
                                    InputEmailCliente.getText().trim(),
                                    nuevoTracking,
                                    InputFechaCreacion.getText().trim(),
                                    InputFechaEstimada.getText().trim(),
                                    (String) InputEstadoOrder.getSelectedItem(),
                                    (String) InputEntregaOrder.getSelectedItem(),
                                    (String) InputPesoPaqueteOrder.getSelectedItem()
                            );
                            ordenes.add(nuevaLinea);
                            updated = true;
                        } else {
                            ordenes.add(line);
                        }
                    }
                }
            }

            if (updated) {
                ordenes.sort(Comparator.comparingInt(o -> Integer.parseInt(o.split(",")[3])));

                try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                    for (String orden : ordenes) {
                        writer.write(orden);
                        writer.newLine();
                    }
                }

                inputFile.delete();
                tempFile.renameTo(inputFile);
                JOptionPane.showMessageDialog(this, "Orden actualizada correctamente.");
                cargarOrdenesATabla();

                String idUsuario = OrdersTable.getValueAt(filaSeleccionada, 4).toString();
                String asunto = "Actualizaci√≥n de estado de orden";
                String mensaje = "El estado de tu orden " + nuevoID + " ha sido actualizado a: " + InputEstadoOrder.getSelectedItem().toString();
                String prioridad = "Alta";

                crearNotificacion(idUsuario, asunto, mensaje, prioridad);

                cargarNotificacionesATabla();
            } else {
                tempFile.delete();
                JOptionPane.showMessageDialog(this, "Orden no encontrada.");
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar la orden.");
        }
    }

    private boolean ordenIDYaExiste(String id) {
        try (BufferedReader reader = new BufferedReader(new FileReader(ORDER_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] datos = line.split(",");
                if (datos.length >= 4 && datos[3].equals(id)) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private boolean codigoTrackingYaExiste(String tracking) {
        try (BufferedReader reader = new BufferedReader(new FileReader(ORDER_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] datos = line.split(",");
                if (datos.length >= 8 && datos[7].equalsIgnoreCase(tracking)) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private void cargarOrdenesATabla() {
        DefaultTableModel model = (DefaultTableModel) OrdersTable.getModel();
        model.setRowCount(0);

        File archivo = new File(ORDER_FILE);

        if (!archivo.exists()) {
            try {
                archivo.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "No se pudo crear el archivo de √≥rdenes: " + e.getMessage());
                return;
            }
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = reader.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 13) {
                    for (int i = 0; i < datos.length; i++) {
                        datos[i] = datos[i].trim();
                    }
                    model.addRow(datos);
                } else {
                    System.out.println("L√≠nea inv√°lida (esperados 13 campos): " + linea);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al leer el archivo de √≥rdenes: " + e.getMessage());
        }
    }

    private void buscarOrden() {
        String orderID = InputOrderID.getText().trim();
        if (orderID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de orden.");
            return;
        }

        String[] data = buscarOrdenPorID(orderID);
        if (data != null) {
            DefaultTableModel model = (DefaultTableModel) OrdersTable.getModel();
            model.setRowCount(0);
            model.addRow(data);
        } else {
            JOptionPane.showMessageDialog(this, "Orden no encontrada.");
        }
    }

    private String[] buscarOrdenPorID(String orderID) {
        try (BufferedReader reader = new BufferedReader(new FileReader("ordenes.txt"))) {
            String linea;
            while ((linea = reader.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length >= 13 && partes[3].trim().equals(orderID)) {
                    return partes;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void limpiarCamposOrden() {
        InputOrderID.setText("");
        InputCodigoTracking.setText("");
        InputOrigen.setText("");
        InputDestino.setText("");
        InputEnvio.setText("");
        InputCliente.setText("");
        InputTelefonoCliente.setText("");
        InputEmailCliente.setText("");
        InputFechaCreacion.setText("");
        InputFechaEstimada.setText("");
        InputEstadoOrder.setSelectedIndex(0);
        InputEntregaOrder.setSelectedIndex(0);
        InputPesoPaqueteOrder.setSelectedIndex(0);
    }

    private void eliminarOrden() {
        String orderID = InputOrderID.getText().trim();
        if (orderID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de orden.");
            return;
        }

        if (!ordenIDYaExiste(orderID)) {
            JOptionPane.showMessageDialog(this, "No existe una orden con ese ID.");
            return;
        }

        eliminarOrdenPorID(orderID);
        JOptionPane.showMessageDialog(this, "Orden eliminada correctamente.");
        cargarOrdenesATabla();
    }

    private void eliminarOrdenPorID(String id) {
        try {
            File inputFile = new File("ordenes.txt");
            File tempFile = new File("temp_ordenes.txt");

            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile)); BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.trim().isEmpty()) {
                        continue;
                    }
                    String[] datos = line.split(",");
                    if (datos.length < 13) {
                        continue;
                    }
                    if (!datos[3].trim().equals(id)) {
                        writer.write(line);
                        writer.newLine();
                    }
                }
            }

            if (!inputFile.delete()) {
                System.err.println("No se pudo eliminar el archivo original.");
            }
            if (!tempFile.renameTo(inputFile)) {
                System.err.println("No se pudo renombrar el archivo temporal.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String generarCodigoTrackingUnico() {
        String letras = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        Random rand = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            sb.append(letras.charAt(rand.nextInt(letras.length())));
        }
        return sb.toString();
    }

    // PAGOS (IMPORTANTISIMO)
    private void actualizarTablaPagos() {
        DefaultTableModel modelo = (DefaultTableModel) PaymentsTable.getModel();
        modelo.setRowCount(0);

        File archivo = new File("pagos.txt");
        if (!archivo.exists()) {
            try {
                archivo.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "No se pudo crear el archivo de pagos.");
                return;
            }
        }

        try {
            BufferedReader reader = new BufferedReader(new FileReader(archivo));
            String linea;
            while ((linea = reader.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 10) {
                    modelo.addRow(datos);
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar los pagos en la tabla.");
        }
    }

    private void guardarPago() {
        String archivo = "pagos.txt";
        File file = new File(archivo);

        List<String> pagos = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                pagos.add(linea);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        String codigoPago = InputCodigoPago.getText().trim();
        String idOrden = InputIDOrdenPago.getText().trim();
        String idCliente = InputIDClientePago.getText().trim();
        String fechaPago = InputFechaPago.getText().trim();
        String monto = InputMontoPago.getText().trim();
        String concepto = InputConceptoPago.getText().trim();
        String metodo = (String) InputMetodoPago.getSelectedItem();
        String entidad = (String) InputEntidadEmisoraPago.getSelectedItem();
        String plataforma = (String) InputPlataformaPago.getSelectedItem();
        String estado = (String) InputEstadoPago.getSelectedItem();

        Set<String> codigosPagoExistentes = new HashSet<>();
        Set<Integer> idsOrdenExistentes = new HashSet<>();

        for (String pago : pagos) {
            String[] datos = pago.split(",");
            if (datos.length >= 2) {
                codigosPagoExistentes.add(datos[0]);
                try {
                    idsOrdenExistentes.add(Integer.parseInt(datos[1]));
                } catch (NumberFormatException e) {
                }
            }
        }

        if (codigoPago.isEmpty() || codigosPagoExistentes.contains(codigoPago)) {
            do {
                codigoPago = "PAY" + (int) (Math.random() * 1000000);
            } while (codigosPagoExistentes.contains(codigoPago));
        }

        int nuevoID = 1;
        if (!idOrden.isEmpty()) {
            try {
                int idNum = Integer.parseInt(idOrden);
                while (idsOrdenExistentes.contains(idNum)) {
                    idNum++;
                }
                nuevoID = idNum;
            } catch (NumberFormatException e) {
                while (idsOrdenExistentes.contains(nuevoID)) {
                    nuevoID++;
                }
            }
        } else {
            while (idsOrdenExistentes.contains(nuevoID)) {
                nuevoID++;
            }
        }
        idOrden = String.valueOf(nuevoID);

        String nuevoPago = codigoPago + "," + idOrden + "," + idCliente + "," + fechaPago + "," + monto + ","
                + concepto + "," + metodo + "," + entidad + "," + plataforma + "," + estado;

        int posicion = 0;
        for (; posicion < pagos.size(); posicion++) {
            String[] datos = pagos.get(posicion).split(",");
            if (datos.length >= 2) {
                try {
                    int idExistente = Integer.parseInt(datos[1]);
                    if (nuevoID < idExistente) {
                        break;
                    }
                } catch (NumberFormatException e) {
                }
            }
        }
        pagos.add(posicion, nuevoPago);

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            for (String pago : pagos) {
                bw.write(pago);
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        actualizarTablaPagos();
        limpiarCamposPagos();
    }

    private void llenarCamposDesdeTablaPagos() {
        int fila = PaymentsTable.getSelectedRow();
        if (fila != -1) {
            InputCodigoPago.setText(PaymentsTable.getValueAt(fila, 0).toString());
            InputIDOrdenPago.setText(PaymentsTable.getValueAt(fila, 1).toString());
            InputPaymentID.setText(PaymentsTable.getValueAt(fila, 1).toString());
            InputIDClientePago.setText(PaymentsTable.getValueAt(fila, 2).toString());
            InputFechaPago.setText(PaymentsTable.getValueAt(fila, 3).toString());
            InputMontoPago.setText(PaymentsTable.getValueAt(fila, 4).toString());
            InputConceptoPago.setText(PaymentsTable.getValueAt(fila, 5).toString());

            InputMetodoPago.setSelectedItem(PaymentsTable.getValueAt(fila, 6).toString());
            InputEntidadEmisoraPago.setSelectedItem(PaymentsTable.getValueAt(fila, 7).toString());
            InputPlataformaPago.setSelectedItem(PaymentsTable.getValueAt(fila, 8).toString());
            InputEstadoPago.setSelectedItem(PaymentsTable.getValueAt(fila, 9).toString());
        }
    }

    private void actualizarPagoSeleccionado() {
        int filaSeleccionada = PaymentsTable.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un pago de la tabla para actualizar.");
            return;
        }

        String codigoPagoOriginal = PaymentsTable.getValueAt(filaSeleccionada, 0).toString();
        String idOrdenOriginal = PaymentsTable.getValueAt(filaSeleccionada, 1).toString();

        String nuevoCodigoPago = InputCodigoPago.getText().trim();
        String idOrden = InputIDOrdenPago.getText().trim();
        String idCliente = InputIDClientePago.getText().trim();
        String fechaPago = InputFechaPago.getText().trim();
        String monto = InputMontoPago.getText().trim();
        String concepto = InputConceptoPago.getText().trim();
        String metodo = (String) InputMetodoPago.getSelectedItem();
        String entidad = (String) InputEntidadEmisoraPago.getSelectedItem();
        String plataforma = (String) InputPlataformaPago.getSelectedItem();
        String estado = (String) InputEstadoPago.getSelectedItem();

        if (nuevoCodigoPago.isEmpty() || idOrden.isEmpty() || idCliente.isEmpty()
                || fechaPago.isEmpty() || monto.isEmpty() || concepto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Completa todos los campos antes de actualizar.");
            return;
        }

        try {
            List<String> pagos = new ArrayList<>();
            boolean conflictoCodigo = false;
            boolean conflictoIDOrden = false;

            BufferedReader reader = new BufferedReader(new FileReader("pagos.txt"));
            String linea;

            while ((linea = reader.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 10) {
                    String codigo = datos[0];
                    String idOrdenExistente = datos[1];

                    boolean esOtroRegistro = !codigo.equals(codigoPagoOriginal);

                    if (esOtroRegistro) {
                        if (!nuevoCodigoPago.equals(codigoPagoOriginal) && codigo.equals(nuevoCodigoPago)) {
                            conflictoCodigo = true;
                        }

                        if (!idOrden.equals(idOrdenOriginal) && idOrdenExistente.equals(idOrden)) {
                            conflictoIDOrden = true;
                        }
                    }
                }
            }
            reader.close();

            if (conflictoCodigo) {
                JOptionPane.showMessageDialog(this, "Ya existe otro pago con ese C√≥digo de Pago.");
                return;
            }

            if (conflictoIDOrden) {
                JOptionPane.showMessageDialog(this, "Ya existe otro pago asociado a ese ID de Orden.");
                return;
            }

            BufferedReader reader2 = new BufferedReader(new FileReader("pagos.txt"));
            while ((linea = reader2.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 10) {
                    if (datos[0].equals(codigoPagoOriginal)) {
                        String nuevaLinea = nuevoCodigoPago + "," + idOrden + "," + idCliente + "," + fechaPago + ","
                                + monto + "," + concepto + "," + metodo + "," + entidad + "," + plataforma + "," + estado;
                        pagos.add(nuevaLinea);
                    } else {
                        pagos.add(linea);
                    }
                }
            }
            reader2.close();

            BufferedWriter writer = new BufferedWriter(new FileWriter("pagos.txt"));
            for (String pago : pagos) {
                writer.write(pago);
                writer.newLine();
            }
            writer.close();

            JOptionPane.showMessageDialog(this, "Pago actualizado correctamente.");
            actualizarTablaPagos();

            String asunto = "Actualizaci√≥n de estado de pago";
            String mensaje = "El estado de tu pago para la orden " + idOrden + " ha sido actualizado a: " + estado;
            String idUsuario = idCliente;
            String prioridad = "Alta";

            crearNotificacion(idUsuario, asunto, mensaje, prioridad);

            cargarNotificacionesATabla();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar el pago.");
        }
    }

    private void limpiarCamposPagos() {
        InputCodigoPago.setText("");
        InputIDOrdenPago.setText("");
        InputPaymentID.setText("");
        InputIDClientePago.setText("");
        InputFechaPago.setText("");
        InputMontoPago.setText("");
        InputConceptoPago.setText("");

        if (InputMetodoPago.getItemCount() > 0) {
            InputMetodoPago.setSelectedIndex(0);
        }
        if (InputEntidadEmisoraPago.getItemCount() > 0) {
            InputEntidadEmisoraPago.setSelectedIndex(0);
        }
        if (InputPlataformaPago.getItemCount() > 0) {
            InputPlataformaPago.setSelectedIndex(0);
        }
        if (InputEstadoPago.getItemCount() > 0) {
            InputEstadoPago.setSelectedIndex(0);
        }

        PaymentsTable.clearSelection();
    }

    private void buscarPagoPorOrden() {
        String idOrdenBuscar = InputPaymentID.getText().trim();

        if (idOrdenBuscar.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa un ID de orden para buscar.");
            return;
        }

        try {
            BufferedReader reader = new BufferedReader(new FileReader("pagos.txt"));
            String linea;
            boolean encontrado = false;

            while ((linea = reader.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 10 && datos[1].equals(idOrdenBuscar)) {
                    DefaultTableModel modelo = (DefaultTableModel) PaymentsTable.getModel();
                    modelo.setRowCount(0);

                    modelo.addRow(datos);

                    encontrado = true;
                    break;
                }
            }
            reader.close();

            if (!encontrado) {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ un pago con ese ID de orden.");
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar el pago.");
        }
    }

    private void eliminarPago() {
        int filaSeleccionada = PaymentsTable.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un pago de la tabla para eliminar.");
            return;
        }

        String codigoPagoEliminar = PaymentsTable.getValueAt(filaSeleccionada, 0).toString();

        try {
            File archivo = new File("pagos.txt");
            File archivoTemporal = new File("pagos_temp.txt");

            BufferedReader reader = new BufferedReader(new FileReader(archivo));
            BufferedWriter writer = new BufferedWriter(new FileWriter(archivoTemporal));

            String linea;
            while ((linea = reader.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 10 && !datos[0].equals(codigoPagoEliminar)) {
                    writer.write(linea);
                    writer.newLine();
                }
            }

            reader.close();
            writer.close();

            if (archivo.delete()) {
                archivoTemporal.renameTo(archivo);
            }

            JOptionPane.showMessageDialog(this, "Pago eliminado correctamente.");
            actualizarTablaPagos();

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar el pago.");
        }
    }

    //PRODUCTOS
    private void guardarProducto() {
        String archivo = "productos.txt";
        File file = new File(archivo);

        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }

        List<String> productos = new ArrayList<>();
        TreeSet<Long> idsExistentes = new TreeSet<>();
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                productos.add(linea);
                String[] datos = linea.split(",");
                if (datos.length > 0) {
                    try {
                        idsExistentes.add(Long.parseLong(datos[0]));
                    } catch (NumberFormatException e) {
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        String idTexto = InputIDProducto.getText().trim();
        long nuevoID;

        if (idTexto.isEmpty()) {
            nuevoID = 10000000L;
            while (idsExistentes.contains(nuevoID)) {
                nuevoID++;
            }
        } else {
            try {
                long idPropuesto = Long.parseLong(idTexto);
                if (idsExistentes.contains(idPropuesto)) {
                    nuevoID = idPropuesto + 1;
                    while (idsExistentes.contains(nuevoID)) {
                        nuevoID++;
                    }
                } else {
                    nuevoID = idPropuesto;
                }
            } catch (NumberFormatException e) {
                nuevoID = 10000000L;
                while (idsExistentes.contains(nuevoID)) {
                    nuevoID++;
                }
            }
        }

        String nombre = InputNombreProducto.getText().trim();
        String costo = InputCostoProducto.getText().trim();
        String creacion = InputCreacionProducto.getText().trim();
        String empresa = InputEmpresaProducto.getText().trim();
        String tipo = InputTipoProducto.getText().trim();
        String proveedor = InputProveedorProducto.getText().trim();
        String pesoKg = InputPesoProducto.getText().trim();
        String stock = InputStockProducto.getText().trim();
        String dimensiones = (String) InputDimensionesProducto.getSelectedItem();
        String estado = (String) InputEstadoProducto.getSelectedItem();
        String tipoPeso = (String) InputTipoPesoProducto.getSelectedItem();

        String nuevoProducto = nuevoID + "," + nombre + "," + costo + "," + creacion + "," + empresa + "," + tipo + ","
                + proveedor + "," + pesoKg + "," + stock + "," + dimensiones + "," + estado + "," + tipoPeso;

        int pos = 0;
        for (; pos < productos.size(); pos++) {
            String[] datos = productos.get(pos).split(",");
            if (datos.length > 0) {
                try {
                    long idExistente = Long.parseLong(datos[0]);
                    if (nuevoID < idExistente) {
                        break;
                    }
                } catch (NumberFormatException e) {
                }
            }
        }
        productos.add(pos, nuevoProducto);

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            for (String producto : productos) {
                bw.write(producto);
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        actualizarTablaProductos();
        limpiarCamposProductos();
    }

    private void actualizarTablaProductos() {
        DefaultTableModel model = (DefaultTableModel) ProductsTable.getModel();
        model.setRowCount(0); // Limpiar tabla

        File file = new File("productos.txt");
        if (!file.exists()) {
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 12) {
                    model.addRow(datos);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void limpiarCamposProductos() {
        InputIDProducto.setText("");
        InputProductoID.setText("");
        InputNombreProducto.setText("");
        InputCostoProducto.setText("");
        InputCreacionProducto.setText("");
        InputEmpresaProducto.setText("");
        InputTipoProducto.setText("");
        InputProveedorProducto.setText("");
        InputPesoProducto.setText("");
        InputStockProducto.setText("");

        InputDimensionesProducto.setSelectedIndex(0);
        InputEstadoProducto.setSelectedIndex(0);
        InputTipoPesoProducto.setSelectedIndex(0);
    }

    private void rellenarCamposConDatosProducto(int filaSeleccionada) {
        String idProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 0);
        String nombreProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 1);
        String costoProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 2);
        String creacionProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 3);
        String empresaProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 4);
        String tipoProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 5);
        String proveedorProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 6);
        String pesoProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 7);
        String stockProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 8);
        String dimensionesProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 9);
        String estadoProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 10);
        String tipoPesoProducto = (String) ProductsTable.getValueAt(filaSeleccionada, 11);

        InputIDProducto.setText(idProducto);
        InputProductoID.setText(idProducto);
        InputNombreProducto.setText(nombreProducto);
        InputCostoProducto.setText(costoProducto);
        InputCreacionProducto.setText(creacionProducto);
        InputEmpresaProducto.setText(empresaProducto);
        InputTipoProducto.setText(tipoProducto);
        InputProveedorProducto.setText(proveedorProducto);
        InputPesoProducto.setText(pesoProducto);
        InputStockProducto.setText(stockProducto);

        InputDimensionesProducto.setSelectedItem(dimensionesProducto);
        InputEstadoProducto.setSelectedItem(estadoProducto);
        InputTipoPesoProducto.setSelectedItem(tipoPesoProducto);
    }

    private void buscarProductoPorID() {
        String originalIDProducto = InputIDProducto.getText().trim();
        String originalProductoID = InputProductoID.getText().trim();

        String idBuscar = originalProductoID.isEmpty() ? originalIDProducto : originalProductoID;

        if (idBuscar.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un ID de producto para buscar.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) ProductsTable.getModel();
        model.setRowCount(0);

        limpiarCamposProductos();

        try (BufferedReader br = new BufferedReader(new FileReader("productos.txt"))) {
            String linea;
            boolean encontrado = false;

            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 12 && datos[0].equals(idBuscar)) {
                    model.addRow(datos);
                    encontrado = true;
                    break;
                }
            }

            if (!encontrado) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ ning√∫n producto con ese ID.");
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al leer el archivo de productos.");
        }
    }

    private void actualizarProducto() {
        String archivo = "productos.txt";
        File file = new File(archivo);

        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "No hay productos para actualizar.");
            return;
        }

        int filaSeleccionada = ProductsTable.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, selecciona un producto en la tabla para actualizar.");
            return;
        }

        String idOriginal = ProductsTable.getValueAt(filaSeleccionada, 0).toString().trim();
        String nuevoID = InputProductoID.getText().trim();

        if (nuevoID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un ID de producto.");
            return;
        }

        long nuevoIDnum;
        try {
            nuevoIDnum = Long.parseLong(nuevoID);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El ID debe ser num√©rico.");
            return;
        }

        List<String> productos = new ArrayList<>();
        boolean idDuplicado = false;

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length > 0) {
                    String idExistente = partes[0].trim();
                    if (idExistente.equals(nuevoID) && !idExistente.equals(idOriginal)) {
                        idDuplicado = true;
                        break;
                    }
                }
                productos.add(linea);
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        if (idDuplicado) {
            JOptionPane.showMessageDialog(null, "El nuevo ID ya existe. Use uno diferente.");
            return;
        }

        String nombre = InputNombreProducto.getText().trim();
        String costo = InputCostoProducto.getText().trim();
        String creacion = InputCreacionProducto.getText().trim();
        String empresa = InputEmpresaProducto.getText().trim();
        String tipo = InputTipoProducto.getText().trim();
        String proveedor = InputProveedorProducto.getText().trim();
        String pesoKg = InputPesoProducto.getText().trim();
        String stock = InputStockProducto.getText().trim();
        String dimensiones = (String) InputDimensionesProducto.getSelectedItem();
        String estado = (String) InputEstadoProducto.getSelectedItem();
        String tipoPeso = (String) InputTipoPesoProducto.getSelectedItem();

        String productoActualizado = nuevoID + "," + nombre + "," + costo + "," + creacion + "," + empresa + ","
                + tipo + "," + proveedor + "," + pesoKg + "," + stock + "," + dimensiones + "," + estado + "," + tipoPeso;

        productos.removeIf(p -> p.startsWith(idOriginal + ","));

        List<String> productosFinal = new ArrayList<>();
        boolean insertado = false;
        for (String prod : productos) {
            String[] partes = prod.split(",");
            try {
                long idProd = Long.parseLong(partes[0].trim());
                if (!insertado && nuevoIDnum < idProd) {
                    productosFinal.add(productoActualizado);
                    insertado = true;
                }
            } catch (NumberFormatException e) {
                // Ignorar
            }
            productosFinal.add(prod);
        }

        if (!insertado) {
            productosFinal.add(productoActualizado);
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            for (String prod : productosFinal) {
                bw.write(prod);
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        actualizarTablaProductos();
        limpiarCamposProductos();
        JOptionPane.showMessageDialog(null, "Producto actualizado correctamente.");
    }

    private boolean idProductoYaExiste(String idBuscado) {
        try (BufferedReader br = new BufferedReader(new FileReader("productos.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length > 0 && datos[0].equals(idBuscado)) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private void eliminarProducto() {
        int selectedRow = ProductsTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un producto para eliminar.");
            return;
        }

        String idProducto = (String) ProductsTable.getValueAt(selectedRow, 0);

        List<String> productos = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("productos.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                if (!linea.split(",")[0].equals(idProducto)) {
                    productos.add(linea);
                }
            }

            try (BufferedWriter bw = new BufferedWriter(new FileWriter("productos.txt"))) {
                for (String producto : productos) {
                    bw.write(producto);
                    bw.newLine();
                }
            }

            DefaultTableModel model = (DefaultTableModel) ProductsTable.getModel();
            model.removeRow(selectedRow);

            limpiarCamposProductos();

            JOptionPane.showMessageDialog(null, "Producto eliminado con √©xito.");

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al eliminar el producto.");
        }
    }

    //NOTIFICACIONES
    private void cargarNotificacionesATabla() {
        DefaultTableModel modelo = (DefaultTableModel) NotificationsTable.getModel();
        modelo.setRowCount(0);

        File archivo = new File("notificaciones.txt");

        if (!archivo.exists()) {
            try {
                archivo.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "No se pudo crear el archivo notificaciones.txt:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Leer las l√≠neas del archivo
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",", -1);
                if (datos.length == 8) {
                    modelo.addRow(datos);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer notificaciones.txt:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void guardarNotificacion() {
        String idNotificacion = InputIDNotificacion.getText().trim();
        String idUsuario = InputIDUsuario.getText().trim();
        String fecha = InputFechaNotificacion.getText().trim();
        String hora = InputHoraEnvioNotificacion.getText().trim();
        String asunto = InputAsuntoNotificacion.getText().trim();
        String mensaje = InputMensajeNotificacion.getText().trim();
        String estado = InputEstadoNotificacion.getSelectedItem().toString();
        String prioridad = InputPrioridadNotificacion.getSelectedItem().toString();

        if (idUsuario.isEmpty() || fecha.isEmpty() || hora.isEmpty() || asunto.isEmpty() || mensaje.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos obligatorios.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        File archivo = new File("notificaciones.txt");
        Set<String> idsExistentes = new HashSet<>();

        try {
            if (!archivo.exists()) {
                archivo.createNewFile();
            } else {
                BufferedReader br = new BufferedReader(new FileReader(archivo));
                String linea;
                while ((linea = br.readLine()) != null) {
                    String[] datos = linea.split(",", -1);
                    if (datos.length >= 1) {
                        idsExistentes.add(datos[0]);
                    }
                }
                br.close();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error leyendo el archivo de notificaciones: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (idNotificacion.isEmpty() || idsExistentes.contains(idNotificacion)) {
            int contador = 1;
            do {
                idNotificacion = String.format("NOT%06d", contador);
                contador++;
            } while (idsExistentes.contains(idNotificacion));
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo, true))) {
            bw.write(idNotificacion + "," + idUsuario + "," + fecha + "," + hora + "," + asunto + "," + mensaje + "," + estado + "," + prioridad);
            bw.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error guardando la notificaci√≥n: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JOptionPane.showMessageDialog(this, "Notificaci√≥n guardada correctamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
        cargarNotificacionesATabla();
    }

    private void cargarDatosNotificacionSeleccionada() {
        int filaSeleccionada = NotificationsTable.getSelectedRow();

        if (filaSeleccionada != -1) {
            InputIDNotificacion.setText(NotificationsTable.getValueAt(filaSeleccionada, 0).toString());
            InputIDNotificacionPrioridad.setText(NotificationsTable.getValueAt(filaSeleccionada, 0).toString());
            InputIDUsuario.setText(NotificationsTable.getValueAt(filaSeleccionada, 1).toString());
            InputFechaNotificacion.setText(NotificationsTable.getValueAt(filaSeleccionada, 2).toString());
            InputHoraEnvioNotificacion.setText(NotificationsTable.getValueAt(filaSeleccionada, 3).toString());
            InputAsuntoNotificacion.setText(NotificationsTable.getValueAt(filaSeleccionada, 4).toString());
            InputMensajeNotificacion.setText(NotificationsTable.getValueAt(filaSeleccionada, 5).toString());
            InputEstadoNotificacion.setSelectedItem(NotificationsTable.getValueAt(filaSeleccionada, 6).toString());
            InputPrioridadNotificacion.setSelectedItem(NotificationsTable.getValueAt(filaSeleccionada, 7).toString());
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una notificaci√≥n de la tabla.", "Sin selecci√≥n", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void sobrescribirNotificacion() {
        int fila = NotificationsTable.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una notificaci√≥n de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String idOriginal = NotificationsTable.getValueAt(fila, 0).toString();
        String nuevoID = InputIDNotificacionPrioridad.getText().trim();

        if (nuevoID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo ID de Notificaci√≥n no puede estar vac√≠o.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        File archivo = new File("notificaciones.txt");
        if (!archivo.exists()) {
            try {
                archivo.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "No se pudo crear el archivo notificaciones.txt:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        List<String> lineas = new ArrayList<>();
        boolean actualizado = false;

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",", -1);
                if (datos.length == 8 && datos[0].equals(idOriginal)) {
                    String nuevaLinea = nuevoID + ","
                            + InputIDUsuario.getText().trim() + ","
                            + InputFechaNotificacion.getText().trim() + ","
                            + InputHoraEnvioNotificacion.getText().trim() + ","
                            + InputAsuntoNotificacion.getText().trim() + ","
                            + InputMensajeNotificacion.getText().trim() + ","
                            + InputEstadoNotificacion.getSelectedItem().toString() + ","
                            + InputPrioridadNotificacion.getSelectedItem().toString();
                    lineas.add(nuevaLinea);
                    actualizado = true;
                } else {
                    lineas.add(linea);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer notificaciones.txt:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!actualizado) {
            JOptionPane.showMessageDialog(this, "No se encontr√≥ la notificaci√≥n seleccionada en el archivo.", "No encontrado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo))) {
            for (String l : lineas) {
                bw.write(l);
                bw.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al escribir en notificaciones.txt:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JOptionPane.showMessageDialog(this, "Notificaci√≥n actualizada correctamente.");
        cargarNotificacionesATabla();
    }

    private void buscarNotificacionPorID() {
        String idBuscado = InputIDNotificacionPrioridad.getText().trim();
        if (idBuscado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un ID de notificaci√≥n para buscar.", "Campo vac√≠o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        File archivo = new File("notificaciones.txt");
        if (!archivo.exists()) {
            JOptionPane.showMessageDialog(this, "El archivo de notificaciones no existe.", "Archivo no encontrado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) NotificationsTable.getModel();
        Vector<Vector<Object>> respaldoTabla = new Vector<>();

        for (int i = 0; i < modelo.getRowCount(); i++) {
            Vector<Object> fila = new Vector<>();
            for (int j = 0; j < modelo.getColumnCount(); j++) {
                fila.add(modelo.getValueAt(i, j));
            }
            respaldoTabla.add(fila);
        }

        boolean encontrado = false;

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",", -1);
                if (datos.length == 8 && datos[0].equals(idBuscado)) {
                    modelo.setRowCount(0);
                    modelo.addRow(datos);
                    encontrado = true;
                    break;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer notificaciones.txt:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "No se encontr√≥ una notificaci√≥n con el ID especificado.", "No encontrado", JOptionPane.WARNING_MESSAGE);
            modelo.setRowCount(0);
            for (Vector<Object> fila : respaldoTabla) {
                modelo.addRow(fila);
            }
        }
    }

    private void eliminarNotificacion() {
        int filaSeleccionada = NotificationsTable.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una notificaci√≥n de la tabla para eliminar.", "Sin selecci√≥n", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String idNotificacion = NotificationsTable.getValueAt(filaSeleccionada, 0).toString();

        File archivo = new File("notificaciones.txt");
        if (!archivo.exists()) {
            JOptionPane.showMessageDialog(this, "El archivo de notificaciones no existe.", "Archivo no encontrado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        File archivoTemporal = new File("notificaciones_temp.txt");
        boolean eliminada = false;

        try (BufferedReader br = new BufferedReader(new FileReader(archivo)); BufferedWriter bw = new BufferedWriter(new FileWriter(archivoTemporal))) {

            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",", -1);
                if (datos.length == 8 && datos[0].equals(idNotificacion)) {
                    eliminada = true;
                } else {
                    bw.write(linea);
                    bw.newLine();
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al procesar el archivo:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (archivo.delete()) {
            archivoTemporal.renameTo(archivo);
        }

        if (eliminada) {
            JOptionPane.showMessageDialog(this, "Notificaci√≥n eliminada correctamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontr√≥ la notificaci√≥n para eliminar.", "No encontrado", JOptionPane.WARNING_MESSAGE);
        }

        cargarNotificacionesATabla();
    }

    private void limpiarCamposNotificacion() {
        InputIDNotificacion.setText("");
        InputIDNotificacionPrioridad.setText("");
        InputIDUsuario.setText("");
        InputFechaNotificacion.setText("");
        InputHoraEnvioNotificacion.setText("");
        InputAsuntoNotificacion.setText("");
        InputMensajeNotificacion.setText("");
        InputEstadoNotificacion.setSelectedIndex(0);
        InputPrioridadNotificacion.setSelectedIndex(0);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AllayNexoIcon;
    private javax.swing.JButton BActualizar;
    private javax.swing.JButton BActualizarNotificaciones;
    private javax.swing.JButton BActualizarOrder;
    private javax.swing.JButton BActualizarOrders;
    private javax.swing.JButton BActualizarPayment;
    private javax.swing.JButton BActualizarPayments;
    private javax.swing.JButton BActualizarProducto;
    private javax.swing.JButton BActualizarProductos;
    private javax.swing.JButton BActualizarUsuario;
    private javax.swing.JButton BBuscar;
    private javax.swing.JButton BBuscarNotificacion;
    private javax.swing.JButton BBuscarOrders;
    private javax.swing.JButton BBuscarPayments;
    private javax.swing.JButton BBuscarProducto;
    private javax.swing.JButton BCerrarSesion;
    private javax.swing.JButton BEliminar;
    private javax.swing.JButton BEliminarNotificacion;
    private javax.swing.JButton BEliminarOrders;
    private javax.swing.JButton BEliminarPayments;
    private javax.swing.JButton BEliminarProducto;
    private javax.swing.JButton BGuardar;
    private javax.swing.JButton BGuardarNotificacion;
    private javax.swing.JButton BGuardarOrders;
    private javax.swing.JButton BGuardarPayments;
    private javax.swing.JButton BGuardarProducto;
    private javax.swing.JButton BLimpiarDatos;
    private javax.swing.JButton BLimpiarDatosNotificaciones;
    private javax.swing.JButton BLimpiarDatosOrders;
    private javax.swing.JButton BLimpiarDatosPayments;
    private javax.swing.JButton BLimpiarDatosProductos;
    private javax.swing.JButton BMainExportarDatos;
    private javax.swing.JButton BMainImportarDatos;
    private javax.swing.JButton BNotificationsManagerMain;
    private javax.swing.JButton BOrdersManagerMain;
    private javax.swing.JButton BOverivewMain;
    private javax.swing.JButton BPaymentsManagerMain;
    private javax.swing.JButton BProductManagerMain;
    private javax.swing.JButton BSobreescribirNotificacion;
    private javax.swing.JButton BUsersManagerMain;
    private javax.swing.JTextField InputApellido;
    private javax.swing.JTextField InputAsuntoNotificacion;
    private javax.swing.JTextField InputBalance;
    private javax.swing.JTextField InputCedula;
    private javax.swing.JTextField InputCliente;
    private javax.swing.JTextField InputCodigoPago;
    private javax.swing.JTextField InputCodigoTracking;
    private javax.swing.JTextField InputConceptoPago;
    private javax.swing.JTextField InputContrase√±a;
    private javax.swing.JTextField InputCostoProducto;
    private javax.swing.JTextField InputCreacionProducto;
    private javax.swing.JTextField InputDestino;
    private javax.swing.JComboBox<String> InputDimensionesProducto;
    private javax.swing.JTextField InputEdad;
    private javax.swing.JTextField InputEmail;
    private javax.swing.JTextField InputEmailCliente;
    private javax.swing.JTextField InputEmpresaProducto;
    private javax.swing.JComboBox<String> InputEntidadEmisoraPago;
    private javax.swing.JComboBox<String> InputEntregaOrder;
    private javax.swing.JTextField InputEnvio;
    private javax.swing.JComboBox<String> InputEstado;
    private javax.swing.JComboBox<String> InputEstadoNotificacion;
    private javax.swing.JComboBox<String> InputEstadoOrder;
    private javax.swing.JComboBox<String> InputEstadoPago;
    private javax.swing.JComboBox<String> InputEstadoProducto;
    private javax.swing.JTextField InputFechaCreacion;
    private javax.swing.JTextField InputFechaEstimada;
    private javax.swing.JTextField InputFechaNotificacion;
    private javax.swing.JTextField InputFechaPago;
    private javax.swing.JTextField InputHoraEnvioNotificacion;
    private javax.swing.JTextField InputID;
    private javax.swing.JTextField InputIDClientePago;
    private javax.swing.JTextField InputIDNotificacion;
    private javax.swing.JTextField InputIDNotificacionPrioridad;
    private javax.swing.JTextField InputIDOrdenPago;
    private javax.swing.JTextField InputIDProducto;
    private javax.swing.JTextField InputIDUsuario;
    private javax.swing.JTextField InputMensajeNotificacion;
    private javax.swing.JComboBox<String> InputMetodoPago;
    private javax.swing.JTextField InputMontoPago;
    private javax.swing.JComboBox<String> InputNivel;
    private javax.swing.JTextField InputNombre;
    private javax.swing.JTextField InputNombreProducto;
    private javax.swing.JTextField InputOrderID;
    private javax.swing.JTextField InputOrigen;
    private javax.swing.JTextField InputPaymentID;
    private javax.swing.JComboBox<String> InputPesoPaqueteOrder;
    private javax.swing.JTextField InputPesoProducto;
    private javax.swing.JComboBox<String> InputPlataformaPago;
    private javax.swing.JComboBox<String> InputPrioridadNotificacion;
    private javax.swing.JTextField InputProductoID;
    private javax.swing.JTextField InputProveedorProducto;
    private javax.swing.JTextField InputStockProducto;
    private javax.swing.JTextField InputTelefono;
    private javax.swing.JTextField InputTelefonoCliente;
    private javax.swing.JComboBox<String> InputTipoPesoProducto;
    private javax.swing.JTextField InputTipoProducto;
    private allaynexo.PanelRound JPanel;
    private allaynexo.PanelRound MainAppSelector;
    private javax.swing.JTabbedPane MainTabs;
    private javax.swing.JLabel NotificationsIcon;
    private javax.swing.JPanel NotificationsTab;
    private javax.swing.JTable NotificationsTable;
    private javax.swing.JLabel OrdersManagerIcon;
    private allaynexo.PanelRound OrdersManagerMainPanel;
    private javax.swing.JPanel OrdersManagerTab;
    private javax.swing.JTable OrdersTable;
    private javax.swing.JLabel OverviewIcon;
    private allaynexo.PanelRound OverviewMainPanel;
    private javax.swing.JPanel OverviewTab;
    private allaynexo.PanelRound PaymentsManagerMainPanel;
    private allaynexo.PanelRound PaymentsManagerMainPanel1;
    private javax.swing.JPanel PaymentsManagerTab;
    private javax.swing.JLabel PaymentsManagersIcon;
    private javax.swing.JTable PaymentsTable;
    private javax.swing.JLabel ProductManagerIcon;
    private allaynexo.PanelRound ProductManagerMainPanel;
    private javax.swing.JPanel ProductsManagerTab;
    private javax.swing.JTable ProductsTable;
    private javax.swing.JLabel TotalPedidosOverview;
    private javax.swing.JLabel TotalPedidosOverviewIcon;
    private javax.swing.JLabel TotalProductosOverview;
    private javax.swing.JLabel TotalProductosOverviewIcon;
    private javax.swing.JLabel TotalSancionesOverview;
    private javax.swing.JLabel TotalSancionesOverviewIcon;
    private allaynexo.PanelRound TotalUsersOverviewPanel;
    private allaynexo.PanelRound TotalUsersOverviewPanel1;
    private allaynexo.PanelRound TotalUsersOverviewPanel2;
    private allaynexo.PanelRound TotalUsersOverviewPanel3;
    private allaynexo.PanelRound TotalUsersOverviewPanel5;
    private allaynexo.PanelRound TotalUsersOverviewPanel9;
    private javax.swing.JLabel TotalUsuariosOverview;
    private javax.swing.JLabel TotalUsuariosOverviewIcon;
    private javax.swing.JPanel UserManagerTab;
    private javax.swing.JLabel UsersManagerIcon;
    private allaynexo.PanelRound UsersManagerMainPanel;
    private javax.swing.JTable UsersTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private allaynexo.PanelRound panelRound2;
    // End of variables declaration//GEN-END:variables
}
